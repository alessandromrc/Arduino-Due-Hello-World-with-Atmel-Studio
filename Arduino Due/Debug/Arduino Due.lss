
Arduino Due.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002740  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000974  20070000  00082740  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000000fc  20070974  000830b4  00020974  2**2
                  ALLOC
  3 .stack        00002000  20070a70  000831b0  00020974  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020974  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002099d  2**0
                  CONTENTS, READONLY
  6 .debug_info   000102e4  00000000  00000000  000209f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025a5  00000000  00000000  00030cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000356b  00000000  00000000  0003327f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008c8  00000000  00000000  000367ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000818  00000000  00000000  000370b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001813e  00000000  00000000  000378ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b2fd  00000000  00000000  0004fa08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000662dc  00000000  00000000  0005ad05  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001bec  00000000  00000000  000c0fe4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	70 2a 07 20 09 09 08 00 05 09 08 00 05 09 08 00     p*. ............
   80010:	05 09 08 00 05 09 08 00 05 09 08 00 00 00 00 00     ................
	...
   8002c:	05 09 08 00 05 09 08 00 00 00 00 00 05 09 08 00     ................
   8003c:	a9 02 08 00 05 09 08 00 05 09 08 00 05 09 08 00     ................
   8004c:	05 09 08 00 05 09 08 00 05 09 08 00 05 09 08 00     ................
   8005c:	05 09 08 00 05 09 08 00 05 09 08 00 00 00 00 00     ................
   8006c:	29 07 08 00 3d 07 08 00 51 07 08 00 65 07 08 00     )...=...Q...e...
	...
   80084:	05 09 08 00 05 09 08 00 05 09 08 00 05 09 08 00     ................
   80094:	05 09 08 00 05 09 08 00 05 09 08 00 05 09 08 00     ................
   800a4:	00 00 00 00 05 09 08 00 05 09 08 00 05 09 08 00     ................
   800b4:	05 09 08 00 05 09 08 00 05 09 08 00 05 09 08 00     ................
   800c4:	05 09 08 00 05 09 08 00 05 09 08 00 05 09 08 00     ................
   800d4:	05 09 08 00 05 09 08 00 05 09 08 00 05 09 08 00     ................
   800e4:	05 09 08 00 05 09 08 00 05 09 08 00 05 09 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070974 	.word	0x20070974
   80110:	00000000 	.word	0x00000000
   80114:	00082740 	.word	0x00082740

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00082740 	.word	0x00082740
   80154:	20070978 	.word	0x20070978
   80158:	00082740 	.word	0x00082740
   8015c:	00000000 	.word	0x00000000

00080160 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80160:	b5f0      	push	{r4, r5, r6, r7, lr}
   80162:	b083      	sub	sp, #12
   80164:	4604      	mov	r4, r0
   80166:	460d      	mov	r5, r1
	uint32_t val = 0;
   80168:	2300      	movs	r3, #0
   8016a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8016c:	4b20      	ldr	r3, [pc, #128]	; (801f0 <usart_serial_getchar+0x90>)
   8016e:	4298      	cmp	r0, r3
   80170:	d00d      	beq.n	8018e <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80172:	4b20      	ldr	r3, [pc, #128]	; (801f4 <usart_serial_getchar+0x94>)
   80174:	4298      	cmp	r0, r3
   80176:	d012      	beq.n	8019e <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80178:	4b1f      	ldr	r3, [pc, #124]	; (801f8 <usart_serial_getchar+0x98>)
   8017a:	4298      	cmp	r0, r3
   8017c:	d019      	beq.n	801b2 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8017e:	4b1f      	ldr	r3, [pc, #124]	; (801fc <usart_serial_getchar+0x9c>)
   80180:	429c      	cmp	r4, r3
   80182:	d020      	beq.n	801c6 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80184:	4b1e      	ldr	r3, [pc, #120]	; (80200 <usart_serial_getchar+0xa0>)
   80186:	429c      	cmp	r4, r3
   80188:	d027      	beq.n	801da <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8018a:	b003      	add	sp, #12
   8018c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   8018e:	461f      	mov	r7, r3
   80190:	4e1c      	ldr	r6, [pc, #112]	; (80204 <usart_serial_getchar+0xa4>)
   80192:	4629      	mov	r1, r5
   80194:	4638      	mov	r0, r7
   80196:	47b0      	blx	r6
   80198:	2800      	cmp	r0, #0
   8019a:	d1fa      	bne.n	80192 <usart_serial_getchar+0x32>
   8019c:	e7ef      	b.n	8017e <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   8019e:	461f      	mov	r7, r3
   801a0:	4e19      	ldr	r6, [pc, #100]	; (80208 <usart_serial_getchar+0xa8>)
   801a2:	a901      	add	r1, sp, #4
   801a4:	4638      	mov	r0, r7
   801a6:	47b0      	blx	r6
   801a8:	2800      	cmp	r0, #0
   801aa:	d1fa      	bne.n	801a2 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   801ac:	9b01      	ldr	r3, [sp, #4]
   801ae:	702b      	strb	r3, [r5, #0]
   801b0:	e7e8      	b.n	80184 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   801b2:	461e      	mov	r6, r3
   801b4:	4c14      	ldr	r4, [pc, #80]	; (80208 <usart_serial_getchar+0xa8>)
   801b6:	a901      	add	r1, sp, #4
   801b8:	4630      	mov	r0, r6
   801ba:	47a0      	blx	r4
   801bc:	2800      	cmp	r0, #0
   801be:	d1fa      	bne.n	801b6 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   801c0:	9b01      	ldr	r3, [sp, #4]
   801c2:	702b      	strb	r3, [r5, #0]
   801c4:	e7e1      	b.n	8018a <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   801c6:	461e      	mov	r6, r3
   801c8:	4c0f      	ldr	r4, [pc, #60]	; (80208 <usart_serial_getchar+0xa8>)
   801ca:	a901      	add	r1, sp, #4
   801cc:	4630      	mov	r0, r6
   801ce:	47a0      	blx	r4
   801d0:	2800      	cmp	r0, #0
   801d2:	d1fa      	bne.n	801ca <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   801d4:	9b01      	ldr	r3, [sp, #4]
   801d6:	702b      	strb	r3, [r5, #0]
   801d8:	e7d7      	b.n	8018a <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   801da:	461e      	mov	r6, r3
   801dc:	4c0a      	ldr	r4, [pc, #40]	; (80208 <usart_serial_getchar+0xa8>)
   801de:	a901      	add	r1, sp, #4
   801e0:	4630      	mov	r0, r6
   801e2:	47a0      	blx	r4
   801e4:	2800      	cmp	r0, #0
   801e6:	d1fa      	bne.n	801de <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   801e8:	9b01      	ldr	r3, [sp, #4]
   801ea:	702b      	strb	r3, [r5, #0]
}
   801ec:	e7cd      	b.n	8018a <usart_serial_getchar+0x2a>
   801ee:	bf00      	nop
   801f0:	400e0800 	.word	0x400e0800
   801f4:	40098000 	.word	0x40098000
   801f8:	4009c000 	.word	0x4009c000
   801fc:	400a0000 	.word	0x400a0000
   80200:	400a4000 	.word	0x400a4000
   80204:	000808c7 	.word	0x000808c7
   80208:	000808ed 	.word	0x000808ed

0008020c <usart_serial_putchar>:
{
   8020c:	b570      	push	{r4, r5, r6, lr}
   8020e:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   80210:	4b1e      	ldr	r3, [pc, #120]	; (8028c <usart_serial_putchar+0x80>)
   80212:	4298      	cmp	r0, r3
   80214:	d00d      	beq.n	80232 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   80216:	4b1e      	ldr	r3, [pc, #120]	; (80290 <usart_serial_putchar+0x84>)
   80218:	4298      	cmp	r0, r3
   8021a:	d013      	beq.n	80244 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   8021c:	4b1d      	ldr	r3, [pc, #116]	; (80294 <usart_serial_putchar+0x88>)
   8021e:	4298      	cmp	r0, r3
   80220:	d019      	beq.n	80256 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   80222:	4b1d      	ldr	r3, [pc, #116]	; (80298 <usart_serial_putchar+0x8c>)
   80224:	4298      	cmp	r0, r3
   80226:	d01f      	beq.n	80268 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   80228:	4b1c      	ldr	r3, [pc, #112]	; (8029c <usart_serial_putchar+0x90>)
   8022a:	4298      	cmp	r0, r3
   8022c:	d025      	beq.n	8027a <usart_serial_putchar+0x6e>
	return 0;
   8022e:	2000      	movs	r0, #0
}
   80230:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   80232:	461e      	mov	r6, r3
   80234:	4d1a      	ldr	r5, [pc, #104]	; (802a0 <usart_serial_putchar+0x94>)
   80236:	4621      	mov	r1, r4
   80238:	4630      	mov	r0, r6
   8023a:	47a8      	blx	r5
   8023c:	2800      	cmp	r0, #0
   8023e:	d1fa      	bne.n	80236 <usart_serial_putchar+0x2a>
		return 1;
   80240:	2001      	movs	r0, #1
   80242:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80244:	461e      	mov	r6, r3
   80246:	4d17      	ldr	r5, [pc, #92]	; (802a4 <usart_serial_putchar+0x98>)
   80248:	4621      	mov	r1, r4
   8024a:	4630      	mov	r0, r6
   8024c:	47a8      	blx	r5
   8024e:	2800      	cmp	r0, #0
   80250:	d1fa      	bne.n	80248 <usart_serial_putchar+0x3c>
		return 1;
   80252:	2001      	movs	r0, #1
   80254:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80256:	461e      	mov	r6, r3
   80258:	4d12      	ldr	r5, [pc, #72]	; (802a4 <usart_serial_putchar+0x98>)
   8025a:	4621      	mov	r1, r4
   8025c:	4630      	mov	r0, r6
   8025e:	47a8      	blx	r5
   80260:	2800      	cmp	r0, #0
   80262:	d1fa      	bne.n	8025a <usart_serial_putchar+0x4e>
		return 1;
   80264:	2001      	movs	r0, #1
   80266:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80268:	461e      	mov	r6, r3
   8026a:	4d0e      	ldr	r5, [pc, #56]	; (802a4 <usart_serial_putchar+0x98>)
   8026c:	4621      	mov	r1, r4
   8026e:	4630      	mov	r0, r6
   80270:	47a8      	blx	r5
   80272:	2800      	cmp	r0, #0
   80274:	d1fa      	bne.n	8026c <usart_serial_putchar+0x60>
		return 1;
   80276:	2001      	movs	r0, #1
   80278:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8027a:	461e      	mov	r6, r3
   8027c:	4d09      	ldr	r5, [pc, #36]	; (802a4 <usart_serial_putchar+0x98>)
   8027e:	4621      	mov	r1, r4
   80280:	4630      	mov	r0, r6
   80282:	47a8      	blx	r5
   80284:	2800      	cmp	r0, #0
   80286:	d1fa      	bne.n	8027e <usart_serial_putchar+0x72>
		return 1;
   80288:	2001      	movs	r0, #1
   8028a:	bd70      	pop	{r4, r5, r6, pc}
   8028c:	400e0800 	.word	0x400e0800
   80290:	40098000 	.word	0x40098000
   80294:	4009c000 	.word	0x4009c000
   80298:	400a0000 	.word	0x400a0000
   8029c:	400a4000 	.word	0x400a4000
   802a0:	000808b7 	.word	0x000808b7
   802a4:	000808d9 	.word	0x000808d9

000802a8 <SysTick_Handler>:

static volatile uint32_t gs_ul_ms_ticks = 0;

void SysTick_Handler(void)
{
	gs_ul_ms_ticks++;
   802a8:	4a02      	ldr	r2, [pc, #8]	; (802b4 <SysTick_Handler+0xc>)
   802aa:	6813      	ldr	r3, [r2, #0]
   802ac:	3301      	adds	r3, #1
   802ae:	6013      	str	r3, [r2, #0]
   802b0:	4770      	bx	lr
   802b2:	bf00      	nop
   802b4:	20070990 	.word	0x20070990

000802b8 <main>:
	ul_cur_ticks = gs_ul_ms_ticks;
	while ((gs_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
}

int main(void)
{
   802b8:	b500      	push	{lr}
   802ba:	b085      	sub	sp, #20
	uint32_t i;
	uint8_t uc_key;
	/* Initialize the SAM system. */
	sysclk_init();
   802bc:	4b16      	ldr	r3, [pc, #88]	; (80318 <main+0x60>)
   802be:	4798      	blx	r3
	board_init();
   802c0:	4b16      	ldr	r3, [pc, #88]	; (8031c <main+0x64>)
   802c2:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   802c4:	2008      	movs	r0, #8
   802c6:	4d16      	ldr	r5, [pc, #88]	; (80320 <main+0x68>)
   802c8:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   802ca:	4c16      	ldr	r4, [pc, #88]	; (80324 <main+0x6c>)
   802cc:	4b16      	ldr	r3, [pc, #88]	; (80328 <main+0x70>)
   802ce:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   802d0:	4a16      	ldr	r2, [pc, #88]	; (8032c <main+0x74>)
   802d2:	4b17      	ldr	r3, [pc, #92]	; (80330 <main+0x78>)
   802d4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   802d6:	4a17      	ldr	r2, [pc, #92]	; (80334 <main+0x7c>)
   802d8:	4b17      	ldr	r3, [pc, #92]	; (80338 <main+0x80>)
   802da:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   802dc:	4b17      	ldr	r3, [pc, #92]	; (8033c <main+0x84>)
   802de:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   802e0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   802e4:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   802e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   802ea:	9303      	str	r3, [sp, #12]
   802ec:	2008      	movs	r0, #8
   802ee:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   802f0:	a901      	add	r1, sp, #4
   802f2:	4620      	mov	r0, r4
   802f4:	4b12      	ldr	r3, [pc, #72]	; (80340 <main+0x88>)
   802f6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   802f8:	4d12      	ldr	r5, [pc, #72]	; (80344 <main+0x8c>)
   802fa:	682b      	ldr	r3, [r5, #0]
   802fc:	2100      	movs	r1, #0
   802fe:	6898      	ldr	r0, [r3, #8]
   80300:	4c11      	ldr	r4, [pc, #68]	; (80348 <main+0x90>)
   80302:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80304:	682b      	ldr	r3, [r5, #0]
   80306:	2100      	movs	r1, #0
   80308:	6858      	ldr	r0, [r3, #4]
   8030a:	47a0      	blx	r4
	configure_console();
	/* Output example information. */
	while(true)
	{
	puts("Hello World");
   8030c:	4d0f      	ldr	r5, [pc, #60]	; (8034c <main+0x94>)
   8030e:	4c10      	ldr	r4, [pc, #64]	; (80350 <main+0x98>)
   80310:	4628      	mov	r0, r5
   80312:	47a0      	blx	r4
   80314:	e7fc      	b.n	80310 <main+0x58>
   80316:	bf00      	nop
   80318:	00080355 	.word	0x00080355
   8031c:	00080445 	.word	0x00080445
   80320:	00080861 	.word	0x00080861
   80324:	400e0800 	.word	0x400e0800
   80328:	20070a44 	.word	0x20070a44
   8032c:	0008020d 	.word	0x0008020d
   80330:	20070a40 	.word	0x20070a40
   80334:	00080161 	.word	0x00080161
   80338:	20070a3c 	.word	0x20070a3c
   8033c:	0501bd00 	.word	0x0501bd00
   80340:	00080881 	.word	0x00080881
   80344:	20070130 	.word	0x20070130
   80348:	00080ca1 	.word	0x00080ca1
   8034c:	00082708 	.word	0x00082708
   80350:	00080c91 	.word	0x00080c91

00080354 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80354:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80356:	480e      	ldr	r0, [pc, #56]	; (80390 <sysclk_init+0x3c>)
   80358:	4b0e      	ldr	r3, [pc, #56]	; (80394 <sysclk_init+0x40>)
   8035a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8035c:	213e      	movs	r1, #62	; 0x3e
   8035e:	2000      	movs	r0, #0
   80360:	4b0d      	ldr	r3, [pc, #52]	; (80398 <sysclk_init+0x44>)
   80362:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80364:	4c0d      	ldr	r4, [pc, #52]	; (8039c <sysclk_init+0x48>)
   80366:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80368:	2800      	cmp	r0, #0
   8036a:	d0fc      	beq.n	80366 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8036c:	4b0c      	ldr	r3, [pc, #48]	; (803a0 <sysclk_init+0x4c>)
   8036e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80370:	4a0c      	ldr	r2, [pc, #48]	; (803a4 <sysclk_init+0x50>)
   80372:	4b0d      	ldr	r3, [pc, #52]	; (803a8 <sysclk_init+0x54>)
   80374:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80376:	4c0d      	ldr	r4, [pc, #52]	; (803ac <sysclk_init+0x58>)
   80378:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8037a:	2800      	cmp	r0, #0
   8037c:	d0fc      	beq.n	80378 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8037e:	2010      	movs	r0, #16
   80380:	4b0b      	ldr	r3, [pc, #44]	; (803b0 <sysclk_init+0x5c>)
   80382:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80384:	4b0b      	ldr	r3, [pc, #44]	; (803b4 <sysclk_init+0x60>)
   80386:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80388:	4801      	ldr	r0, [pc, #4]	; (80390 <sysclk_init+0x3c>)
   8038a:	4b02      	ldr	r3, [pc, #8]	; (80394 <sysclk_init+0x40>)
   8038c:	4798      	blx	r3
   8038e:	bd10      	pop	{r4, pc}
   80390:	0501bd00 	.word	0x0501bd00
   80394:	200700a5 	.word	0x200700a5
   80398:	000807dd 	.word	0x000807dd
   8039c:	00080831 	.word	0x00080831
   803a0:	00080841 	.word	0x00080841
   803a4:	200d3f01 	.word	0x200d3f01
   803a8:	400e0600 	.word	0x400e0600
   803ac:	00080851 	.word	0x00080851
   803b0:	00080779 	.word	0x00080779
   803b4:	000809a1 	.word	0x000809a1

000803b8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   803b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   803bc:	b980      	cbnz	r0, 803e0 <_read+0x28>
   803be:	460c      	mov	r4, r1
   803c0:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   803c2:	2a00      	cmp	r2, #0
   803c4:	dd0f      	ble.n	803e6 <_read+0x2e>
   803c6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   803c8:	4e08      	ldr	r6, [pc, #32]	; (803ec <_read+0x34>)
   803ca:	4d09      	ldr	r5, [pc, #36]	; (803f0 <_read+0x38>)
   803cc:	6830      	ldr	r0, [r6, #0]
   803ce:	4621      	mov	r1, r4
   803d0:	682b      	ldr	r3, [r5, #0]
   803d2:	4798      	blx	r3
		ptr++;
   803d4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   803d6:	42bc      	cmp	r4, r7
   803d8:	d1f8      	bne.n	803cc <_read+0x14>
		nChars++;
	}
	return nChars;
}
   803da:	4640      	mov	r0, r8
   803dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   803e0:	f04f 38ff 	mov.w	r8, #4294967295
   803e4:	e7f9      	b.n	803da <_read+0x22>
	for (; len > 0; --len) {
   803e6:	4680      	mov	r8, r0
   803e8:	e7f7      	b.n	803da <_read+0x22>
   803ea:	bf00      	nop
   803ec:	20070a44 	.word	0x20070a44
   803f0:	20070a3c 	.word	0x20070a3c

000803f4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   803f4:	3801      	subs	r0, #1
   803f6:	2802      	cmp	r0, #2
   803f8:	d815      	bhi.n	80426 <_write+0x32>
{
   803fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803fe:	460e      	mov	r6, r1
   80400:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   80402:	b19a      	cbz	r2, 8042c <_write+0x38>
   80404:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80406:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80440 <_write+0x4c>
   8040a:	4f0c      	ldr	r7, [pc, #48]	; (8043c <_write+0x48>)
   8040c:	f8d8 0000 	ldr.w	r0, [r8]
   80410:	f815 1b01 	ldrb.w	r1, [r5], #1
   80414:	683b      	ldr	r3, [r7, #0]
   80416:	4798      	blx	r3
   80418:	2800      	cmp	r0, #0
   8041a:	db0a      	blt.n	80432 <_write+0x3e>
   8041c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   8041e:	3c01      	subs	r4, #1
   80420:	d1f4      	bne.n	8040c <_write+0x18>
   80422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80426:	f04f 30ff 	mov.w	r0, #4294967295
   8042a:	4770      	bx	lr
	for (; len != 0; --len) {
   8042c:	4610      	mov	r0, r2
   8042e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   80432:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   80436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8043a:	bf00      	nop
   8043c:	20070a40 	.word	0x20070a40
   80440:	20070a44 	.word	0x20070a44

00080444 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80444:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8044a:	4b18      	ldr	r3, [pc, #96]	; (804ac <board_init+0x68>)
   8044c:	605a      	str	r2, [r3, #4]
   8044e:	200b      	movs	r0, #11
   80450:	4c17      	ldr	r4, [pc, #92]	; (804b0 <board_init+0x6c>)
   80452:	47a0      	blx	r4
   80454:	200c      	movs	r0, #12
   80456:	47a0      	blx	r4
   80458:	200d      	movs	r0, #13
   8045a:	47a0      	blx	r4
   8045c:	200e      	movs	r0, #14
   8045e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80460:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80464:	203b      	movs	r0, #59	; 0x3b
   80466:	4c13      	ldr	r4, [pc, #76]	; (804b4 <board_init+0x70>)
   80468:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8046a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8046e:	2055      	movs	r0, #85	; 0x55
   80470:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80472:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80476:	2056      	movs	r0, #86	; 0x56
   80478:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8047a:	490f      	ldr	r1, [pc, #60]	; (804b8 <board_init+0x74>)
   8047c:	2068      	movs	r0, #104	; 0x68
   8047e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80480:	490e      	ldr	r1, [pc, #56]	; (804bc <board_init+0x78>)
   80482:	205c      	movs	r0, #92	; 0x5c
   80484:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80486:	4a0e      	ldr	r2, [pc, #56]	; (804c0 <board_init+0x7c>)
   80488:	f44f 7140 	mov.w	r1, #768	; 0x300
   8048c:	480d      	ldr	r0, [pc, #52]	; (804c4 <board_init+0x80>)
   8048e:	4b0e      	ldr	r3, [pc, #56]	; (804c8 <board_init+0x84>)
   80490:	4798      	blx	r3
#endif

	/* Configure ADC example pins */
#ifdef CONF_BOARD_ADC
	/* TC TIOA configuration */
	gpio_configure_pin(PIN_TC0_TIOA0,PIN_TC0_TIOA0_FLAGS);
   80492:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80496:	2039      	movs	r0, #57	; 0x39
   80498:	47a0      	blx	r4

	/* ADC Trigger configuration */
	gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
   8049a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8049e:	200b      	movs	r0, #11
   804a0:	47a0      	blx	r4

	/* PWMH0 configuration */
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
   804a2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   804a6:	202c      	movs	r0, #44	; 0x2c
   804a8:	47a0      	blx	r4
   804aa:	bd10      	pop	{r4, pc}
   804ac:	400e1a50 	.word	0x400e1a50
   804b0:	00080861 	.word	0x00080861
   804b4:	0008056d 	.word	0x0008056d
   804b8:	28000079 	.word	0x28000079
   804bc:	28000001 	.word	0x28000001
   804c0:	08000001 	.word	0x08000001
   804c4:	400e0e00 	.word	0x400e0e00
   804c8:	0008063d 	.word	0x0008063d

000804cc <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   804cc:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   804ce:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   804d2:	d016      	beq.n	80502 <pio_set_peripheral+0x36>
   804d4:	d80b      	bhi.n	804ee <pio_set_peripheral+0x22>
   804d6:	b149      	cbz	r1, 804ec <pio_set_peripheral+0x20>
   804d8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   804dc:	d105      	bne.n	804ea <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   804de:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   804e0:	6f01      	ldr	r1, [r0, #112]	; 0x70
   804e2:	400b      	ands	r3, r1
   804e4:	ea23 0302 	bic.w	r3, r3, r2
   804e8:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   804ea:	6042      	str	r2, [r0, #4]
   804ec:	4770      	bx	lr
	switch (ul_type) {
   804ee:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   804f2:	d0fb      	beq.n	804ec <pio_set_peripheral+0x20>
   804f4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   804f8:	d0f8      	beq.n	804ec <pio_set_peripheral+0x20>
   804fa:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   804fe:	d1f4      	bne.n	804ea <pio_set_peripheral+0x1e>
   80500:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   80502:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80504:	4313      	orrs	r3, r2
   80506:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80508:	e7ef      	b.n	804ea <pio_set_peripheral+0x1e>

0008050a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8050a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   8050c:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80510:	bf14      	ite	ne
   80512:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80514:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80516:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8051a:	bf14      	ite	ne
   8051c:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   8051e:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80520:	f012 0f02 	tst.w	r2, #2
   80524:	d107      	bne.n	80536 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   80526:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8052a:	bf18      	it	ne
   8052c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80530:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80532:	6001      	str	r1, [r0, #0]
   80534:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   80536:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8053a:	e7f9      	b.n	80530 <pio_set_input+0x26>

0008053c <pio_set_output>:
{
   8053c:	b410      	push	{r4}
   8053e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80540:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80542:	b944      	cbnz	r4, 80556 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   80544:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   80546:	b143      	cbz	r3, 8055a <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   80548:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   8054a:	b942      	cbnz	r2, 8055e <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   8054c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   8054e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80550:	6001      	str	r1, [r0, #0]
}
   80552:	bc10      	pop	{r4}
   80554:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   80556:	6641      	str	r1, [r0, #100]	; 0x64
   80558:	e7f5      	b.n	80546 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   8055a:	6541      	str	r1, [r0, #84]	; 0x54
   8055c:	e7f5      	b.n	8054a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   8055e:	6301      	str	r1, [r0, #48]	; 0x30
   80560:	e7f5      	b.n	8054e <pio_set_output+0x12>

00080562 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80562:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80564:	4770      	bx	lr

00080566 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80566:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80568:	4770      	bx	lr
	...

0008056c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8056c:	b570      	push	{r4, r5, r6, lr}
   8056e:	b082      	sub	sp, #8
   80570:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80572:	0943      	lsrs	r3, r0, #5
   80574:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80578:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8057c:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   8057e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80582:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80586:	d031      	beq.n	805ec <pio_configure_pin+0x80>
   80588:	d816      	bhi.n	805b8 <pio_configure_pin+0x4c>
   8058a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8058e:	d01b      	beq.n	805c8 <pio_configure_pin+0x5c>
   80590:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80594:	d116      	bne.n	805c4 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80596:	f000 001f 	and.w	r0, r0, #31
   8059a:	2601      	movs	r6, #1
   8059c:	4086      	lsls	r6, r0
   8059e:	4632      	mov	r2, r6
   805a0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   805a4:	4620      	mov	r0, r4
   805a6:	4b22      	ldr	r3, [pc, #136]	; (80630 <pio_configure_pin+0xc4>)
   805a8:	4798      	blx	r3
	if (ul_pull_up_enable) {
   805aa:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   805ae:	bf14      	ite	ne
   805b0:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   805b2:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   805b4:	2001      	movs	r0, #1
   805b6:	e017      	b.n	805e8 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   805b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   805bc:	d021      	beq.n	80602 <pio_configure_pin+0x96>
   805be:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   805c2:	d01e      	beq.n	80602 <pio_configure_pin+0x96>
		return 0;
   805c4:	2000      	movs	r0, #0
   805c6:	e00f      	b.n	805e8 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   805c8:	f000 001f 	and.w	r0, r0, #31
   805cc:	2601      	movs	r6, #1
   805ce:	4086      	lsls	r6, r0
   805d0:	4632      	mov	r2, r6
   805d2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   805d6:	4620      	mov	r0, r4
   805d8:	4b15      	ldr	r3, [pc, #84]	; (80630 <pio_configure_pin+0xc4>)
   805da:	4798      	blx	r3
	if (ul_pull_up_enable) {
   805dc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   805e0:	bf14      	ite	ne
   805e2:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   805e4:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   805e6:	2001      	movs	r0, #1
}
   805e8:	b002      	add	sp, #8
   805ea:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   805ec:	f000 011f 	and.w	r1, r0, #31
   805f0:	2601      	movs	r6, #1
   805f2:	462a      	mov	r2, r5
   805f4:	fa06 f101 	lsl.w	r1, r6, r1
   805f8:	4620      	mov	r0, r4
   805fa:	4b0e      	ldr	r3, [pc, #56]	; (80634 <pio_configure_pin+0xc8>)
   805fc:	4798      	blx	r3
	return 1;
   805fe:	4630      	mov	r0, r6
		break;
   80600:	e7f2      	b.n	805e8 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80602:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80606:	f000 011f 	and.w	r1, r0, #31
   8060a:	2601      	movs	r6, #1
   8060c:	ea05 0306 	and.w	r3, r5, r6
   80610:	9300      	str	r3, [sp, #0]
   80612:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80616:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8061a:	bf14      	ite	ne
   8061c:	2200      	movne	r2, #0
   8061e:	2201      	moveq	r2, #1
   80620:	fa06 f101 	lsl.w	r1, r6, r1
   80624:	4620      	mov	r0, r4
   80626:	4c04      	ldr	r4, [pc, #16]	; (80638 <pio_configure_pin+0xcc>)
   80628:	47a0      	blx	r4
	return 1;
   8062a:	4630      	mov	r0, r6
		break;
   8062c:	e7dc      	b.n	805e8 <pio_configure_pin+0x7c>
   8062e:	bf00      	nop
   80630:	000804cd 	.word	0x000804cd
   80634:	0008050b 	.word	0x0008050b
   80638:	0008053d 	.word	0x0008053d

0008063c <pio_configure_pin_group>:
{
   8063c:	b570      	push	{r4, r5, r6, lr}
   8063e:	b082      	sub	sp, #8
   80640:	4605      	mov	r5, r0
   80642:	460e      	mov	r6, r1
   80644:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   80646:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   8064a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8064e:	d027      	beq.n	806a0 <pio_configure_pin_group+0x64>
   80650:	d811      	bhi.n	80676 <pio_configure_pin_group+0x3a>
   80652:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80656:	d016      	beq.n	80686 <pio_configure_pin_group+0x4a>
   80658:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8065c:	d111      	bne.n	80682 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8065e:	460a      	mov	r2, r1
   80660:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80664:	4b19      	ldr	r3, [pc, #100]	; (806cc <pio_configure_pin_group+0x90>)
   80666:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80668:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   8066c:	bf14      	ite	ne
   8066e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80670:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80672:	2001      	movs	r0, #1
   80674:	e012      	b.n	8069c <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   80676:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8067a:	d015      	beq.n	806a8 <pio_configure_pin_group+0x6c>
   8067c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80680:	d012      	beq.n	806a8 <pio_configure_pin_group+0x6c>
		return 0;
   80682:	2000      	movs	r0, #0
   80684:	e00a      	b.n	8069c <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80686:	460a      	mov	r2, r1
   80688:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8068c:	4b0f      	ldr	r3, [pc, #60]	; (806cc <pio_configure_pin_group+0x90>)
   8068e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80690:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80694:	bf14      	ite	ne
   80696:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80698:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8069a:	2001      	movs	r0, #1
}
   8069c:	b002      	add	sp, #8
   8069e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   806a0:	4b0b      	ldr	r3, [pc, #44]	; (806d0 <pio_configure_pin_group+0x94>)
   806a2:	4798      	blx	r3
	return 1;
   806a4:	2001      	movs	r0, #1
		break;
   806a6:	e7f9      	b.n	8069c <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   806a8:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   806ac:	f004 0301 	and.w	r3, r4, #1
   806b0:	9300      	str	r3, [sp, #0]
   806b2:	f3c4 0380 	ubfx	r3, r4, #2, #1
   806b6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   806ba:	bf14      	ite	ne
   806bc:	2200      	movne	r2, #0
   806be:	2201      	moveq	r2, #1
   806c0:	4631      	mov	r1, r6
   806c2:	4628      	mov	r0, r5
   806c4:	4c03      	ldr	r4, [pc, #12]	; (806d4 <pio_configure_pin_group+0x98>)
   806c6:	47a0      	blx	r4
	return 1;
   806c8:	2001      	movs	r0, #1
		break;
   806ca:	e7e7      	b.n	8069c <pio_configure_pin_group+0x60>
   806cc:	000804cd 	.word	0x000804cd
   806d0:	0008050b 	.word	0x0008050b
   806d4:	0008053d 	.word	0x0008053d

000806d8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   806d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   806dc:	4604      	mov	r4, r0
   806de:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   806e0:	4b0e      	ldr	r3, [pc, #56]	; (8071c <pio_handler_process+0x44>)
   806e2:	4798      	blx	r3
   806e4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   806e6:	4620      	mov	r0, r4
   806e8:	4b0d      	ldr	r3, [pc, #52]	; (80720 <pio_handler_process+0x48>)
   806ea:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   806ec:	4005      	ands	r5, r0
   806ee:	d013      	beq.n	80718 <pio_handler_process+0x40>
   806f0:	4c0c      	ldr	r4, [pc, #48]	; (80724 <pio_handler_process+0x4c>)
   806f2:	f104 0660 	add.w	r6, r4, #96	; 0x60
   806f6:	e003      	b.n	80700 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   806f8:	42b4      	cmp	r4, r6
   806fa:	d00d      	beq.n	80718 <pio_handler_process+0x40>
   806fc:	3410      	adds	r4, #16
		while (status != 0) {
   806fe:	b15d      	cbz	r5, 80718 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80700:	6820      	ldr	r0, [r4, #0]
   80702:	4540      	cmp	r0, r8
   80704:	d1f8      	bne.n	806f8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80706:	6861      	ldr	r1, [r4, #4]
   80708:	4229      	tst	r1, r5
   8070a:	d0f5      	beq.n	806f8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8070c:	68e3      	ldr	r3, [r4, #12]
   8070e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80710:	6863      	ldr	r3, [r4, #4]
   80712:	ea25 0503 	bic.w	r5, r5, r3
   80716:	e7ef      	b.n	806f8 <pio_handler_process+0x20>
   80718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8071c:	00080563 	.word	0x00080563
   80720:	00080567 	.word	0x00080567
   80724:	20070994 	.word	0x20070994

00080728 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80728:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8072a:	210b      	movs	r1, #11
   8072c:	4801      	ldr	r0, [pc, #4]	; (80734 <PIOA_Handler+0xc>)
   8072e:	4b02      	ldr	r3, [pc, #8]	; (80738 <PIOA_Handler+0x10>)
   80730:	4798      	blx	r3
   80732:	bd08      	pop	{r3, pc}
   80734:	400e0e00 	.word	0x400e0e00
   80738:	000806d9 	.word	0x000806d9

0008073c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8073c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8073e:	210c      	movs	r1, #12
   80740:	4801      	ldr	r0, [pc, #4]	; (80748 <PIOB_Handler+0xc>)
   80742:	4b02      	ldr	r3, [pc, #8]	; (8074c <PIOB_Handler+0x10>)
   80744:	4798      	blx	r3
   80746:	bd08      	pop	{r3, pc}
   80748:	400e1000 	.word	0x400e1000
   8074c:	000806d9 	.word	0x000806d9

00080750 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80750:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80752:	210d      	movs	r1, #13
   80754:	4801      	ldr	r0, [pc, #4]	; (8075c <PIOC_Handler+0xc>)
   80756:	4b02      	ldr	r3, [pc, #8]	; (80760 <PIOC_Handler+0x10>)
   80758:	4798      	blx	r3
   8075a:	bd08      	pop	{r3, pc}
   8075c:	400e1200 	.word	0x400e1200
   80760:	000806d9 	.word	0x000806d9

00080764 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80764:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80766:	210e      	movs	r1, #14
   80768:	4801      	ldr	r0, [pc, #4]	; (80770 <PIOD_Handler+0xc>)
   8076a:	4b02      	ldr	r3, [pc, #8]	; (80774 <PIOD_Handler+0x10>)
   8076c:	4798      	blx	r3
   8076e:	bd08      	pop	{r3, pc}
   80770:	400e1400 	.word	0x400e1400
   80774:	000806d9 	.word	0x000806d9

00080778 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80778:	4a17      	ldr	r2, [pc, #92]	; (807d8 <pmc_switch_mck_to_pllack+0x60>)
   8077a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8077c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80780:	4318      	orrs	r0, r3
   80782:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80784:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80786:	f013 0f08 	tst.w	r3, #8
   8078a:	d10a      	bne.n	807a2 <pmc_switch_mck_to_pllack+0x2a>
   8078c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80790:	4911      	ldr	r1, [pc, #68]	; (807d8 <pmc_switch_mck_to_pllack+0x60>)
   80792:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80794:	f012 0f08 	tst.w	r2, #8
   80798:	d103      	bne.n	807a2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8079a:	3b01      	subs	r3, #1
   8079c:	d1f9      	bne.n	80792 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   8079e:	2001      	movs	r0, #1
   807a0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   807a2:	4a0d      	ldr	r2, [pc, #52]	; (807d8 <pmc_switch_mck_to_pllack+0x60>)
   807a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   807a6:	f023 0303 	bic.w	r3, r3, #3
   807aa:	f043 0302 	orr.w	r3, r3, #2
   807ae:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   807b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   807b2:	f013 0f08 	tst.w	r3, #8
   807b6:	d10a      	bne.n	807ce <pmc_switch_mck_to_pllack+0x56>
   807b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   807bc:	4906      	ldr	r1, [pc, #24]	; (807d8 <pmc_switch_mck_to_pllack+0x60>)
   807be:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   807c0:	f012 0f08 	tst.w	r2, #8
   807c4:	d105      	bne.n	807d2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   807c6:	3b01      	subs	r3, #1
   807c8:	d1f9      	bne.n	807be <pmc_switch_mck_to_pllack+0x46>
			return 1;
   807ca:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   807cc:	4770      	bx	lr
	return 0;
   807ce:	2000      	movs	r0, #0
   807d0:	4770      	bx	lr
   807d2:	2000      	movs	r0, #0
   807d4:	4770      	bx	lr
   807d6:	bf00      	nop
   807d8:	400e0600 	.word	0x400e0600

000807dc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   807dc:	b9c8      	cbnz	r0, 80812 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   807de:	4a11      	ldr	r2, [pc, #68]	; (80824 <pmc_switch_mainck_to_xtal+0x48>)
   807e0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   807e2:	0209      	lsls	r1, r1, #8
   807e4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   807e6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   807ea:	f023 0303 	bic.w	r3, r3, #3
   807ee:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   807f2:	f043 0301 	orr.w	r3, r3, #1
   807f6:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   807f8:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   807fa:	6e93      	ldr	r3, [r2, #104]	; 0x68
   807fc:	f013 0f01 	tst.w	r3, #1
   80800:	d0fb      	beq.n	807fa <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80802:	4a08      	ldr	r2, [pc, #32]	; (80824 <pmc_switch_mainck_to_xtal+0x48>)
   80804:	6a13      	ldr	r3, [r2, #32]
   80806:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8080a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8080e:	6213      	str	r3, [r2, #32]
   80810:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80812:	4904      	ldr	r1, [pc, #16]	; (80824 <pmc_switch_mainck_to_xtal+0x48>)
   80814:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80816:	4a04      	ldr	r2, [pc, #16]	; (80828 <pmc_switch_mainck_to_xtal+0x4c>)
   80818:	401a      	ands	r2, r3
   8081a:	4b04      	ldr	r3, [pc, #16]	; (8082c <pmc_switch_mainck_to_xtal+0x50>)
   8081c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8081e:	620b      	str	r3, [r1, #32]
   80820:	4770      	bx	lr
   80822:	bf00      	nop
   80824:	400e0600 	.word	0x400e0600
   80828:	fec8fffc 	.word	0xfec8fffc
   8082c:	01370002 	.word	0x01370002

00080830 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80830:	4b02      	ldr	r3, [pc, #8]	; (8083c <pmc_osc_is_ready_mainck+0xc>)
   80832:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80834:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80838:	4770      	bx	lr
   8083a:	bf00      	nop
   8083c:	400e0600 	.word	0x400e0600

00080840 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80840:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80844:	4b01      	ldr	r3, [pc, #4]	; (8084c <pmc_disable_pllack+0xc>)
   80846:	629a      	str	r2, [r3, #40]	; 0x28
   80848:	4770      	bx	lr
   8084a:	bf00      	nop
   8084c:	400e0600 	.word	0x400e0600

00080850 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80850:	4b02      	ldr	r3, [pc, #8]	; (8085c <pmc_is_locked_pllack+0xc>)
   80852:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80854:	f000 0002 	and.w	r0, r0, #2
   80858:	4770      	bx	lr
   8085a:	bf00      	nop
   8085c:	400e0600 	.word	0x400e0600

00080860 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   80860:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   80864:	4b05      	ldr	r3, [pc, #20]	; (8087c <pmc_enable_periph_clk+0x1c>)
   80866:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   8086a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   8086e:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   80872:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   80876:	2000      	movs	r0, #0
   80878:	4770      	bx	lr
   8087a:	bf00      	nop
   8087c:	400e0600 	.word	0x400e0600

00080880 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80880:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80882:	23ac      	movs	r3, #172	; 0xac
   80884:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80886:	680b      	ldr	r3, [r1, #0]
   80888:	684a      	ldr	r2, [r1, #4]
   8088a:	fbb3 f3f2 	udiv	r3, r3, r2
   8088e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80890:	1e5c      	subs	r4, r3, #1
   80892:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80896:	4294      	cmp	r4, r2
   80898:	d80b      	bhi.n	808b2 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   8089a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8089c:	688b      	ldr	r3, [r1, #8]
   8089e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   808a0:	f240 2302 	movw	r3, #514	; 0x202
   808a4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   808a8:	2350      	movs	r3, #80	; 0x50
   808aa:	6003      	str	r3, [r0, #0]

	return 0;
   808ac:	2000      	movs	r0, #0
}
   808ae:	bc10      	pop	{r4}
   808b0:	4770      	bx	lr
		return 1;
   808b2:	2001      	movs	r0, #1
   808b4:	e7fb      	b.n	808ae <uart_init+0x2e>

000808b6 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   808b6:	6943      	ldr	r3, [r0, #20]
   808b8:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   808bc:	bf1a      	itte	ne
   808be:	61c1      	strne	r1, [r0, #28]
	return 0;
   808c0:	2000      	movne	r0, #0
		return 1;
   808c2:	2001      	moveq	r0, #1
}
   808c4:	4770      	bx	lr

000808c6 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   808c6:	6943      	ldr	r3, [r0, #20]
   808c8:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   808cc:	bf1d      	ittte	ne
   808ce:	6983      	ldrne	r3, [r0, #24]
   808d0:	700b      	strbne	r3, [r1, #0]
	return 0;
   808d2:	2000      	movne	r0, #0
		return 1;
   808d4:	2001      	moveq	r0, #1
}
   808d6:	4770      	bx	lr

000808d8 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   808d8:	6943      	ldr	r3, [r0, #20]
   808da:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   808de:	bf1d      	ittte	ne
   808e0:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   808e4:	61c1      	strne	r1, [r0, #28]
	return 0;
   808e6:	2000      	movne	r0, #0
		return 1;
   808e8:	2001      	moveq	r0, #1
}
   808ea:	4770      	bx	lr

000808ec <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   808ec:	6943      	ldr	r3, [r0, #20]
   808ee:	f013 0f01 	tst.w	r3, #1
   808f2:	d005      	beq.n	80900 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   808f4:	6983      	ldr	r3, [r0, #24]
   808f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   808fa:	600b      	str	r3, [r1, #0]

	return 0;
   808fc:	2000      	movs	r0, #0
   808fe:	4770      	bx	lr
		return 1;
   80900:	2001      	movs	r0, #1
}
   80902:	4770      	bx	lr

00080904 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80904:	e7fe      	b.n	80904 <Dummy_Handler>
	...

00080908 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80908:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8090a:	4b1c      	ldr	r3, [pc, #112]	; (8097c <Reset_Handler+0x74>)
   8090c:	4a1c      	ldr	r2, [pc, #112]	; (80980 <Reset_Handler+0x78>)
   8090e:	429a      	cmp	r2, r3
   80910:	d010      	beq.n	80934 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80912:	4b1c      	ldr	r3, [pc, #112]	; (80984 <Reset_Handler+0x7c>)
   80914:	4a19      	ldr	r2, [pc, #100]	; (8097c <Reset_Handler+0x74>)
   80916:	429a      	cmp	r2, r3
   80918:	d20c      	bcs.n	80934 <Reset_Handler+0x2c>
   8091a:	3b01      	subs	r3, #1
   8091c:	1a9b      	subs	r3, r3, r2
   8091e:	f023 0303 	bic.w	r3, r3, #3
   80922:	3304      	adds	r3, #4
   80924:	4413      	add	r3, r2
   80926:	4916      	ldr	r1, [pc, #88]	; (80980 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80928:	f851 0b04 	ldr.w	r0, [r1], #4
   8092c:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80930:	429a      	cmp	r2, r3
   80932:	d1f9      	bne.n	80928 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80934:	4b14      	ldr	r3, [pc, #80]	; (80988 <Reset_Handler+0x80>)
   80936:	4a15      	ldr	r2, [pc, #84]	; (8098c <Reset_Handler+0x84>)
   80938:	429a      	cmp	r2, r3
   8093a:	d20a      	bcs.n	80952 <Reset_Handler+0x4a>
   8093c:	3b01      	subs	r3, #1
   8093e:	1a9b      	subs	r3, r3, r2
   80940:	f023 0303 	bic.w	r3, r3, #3
   80944:	3304      	adds	r3, #4
   80946:	4413      	add	r3, r2
		*pDest++ = 0;
   80948:	2100      	movs	r1, #0
   8094a:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   8094e:	4293      	cmp	r3, r2
   80950:	d1fb      	bne.n	8094a <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80952:	4b0f      	ldr	r3, [pc, #60]	; (80990 <Reset_Handler+0x88>)
   80954:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80958:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   8095c:	490d      	ldr	r1, [pc, #52]	; (80994 <Reset_Handler+0x8c>)
   8095e:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80960:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80968:	d203      	bcs.n	80972 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8096a:	688b      	ldr	r3, [r1, #8]
   8096c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80970:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80972:	4b09      	ldr	r3, [pc, #36]	; (80998 <Reset_Handler+0x90>)
   80974:	4798      	blx	r3

	/* Branch to main function */
	main();
   80976:	4b09      	ldr	r3, [pc, #36]	; (8099c <Reset_Handler+0x94>)
   80978:	4798      	blx	r3
   8097a:	e7fe      	b.n	8097a <Reset_Handler+0x72>
   8097c:	20070000 	.word	0x20070000
   80980:	00082740 	.word	0x00082740
   80984:	20070974 	.word	0x20070974
   80988:	20070a70 	.word	0x20070a70
   8098c:	20070974 	.word	0x20070974
   80990:	00080000 	.word	0x00080000
   80994:	e000ed00 	.word	0xe000ed00
   80998:	00080b09 	.word	0x00080b09
   8099c:	000802b9 	.word	0x000802b9

000809a0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   809a0:	4b3d      	ldr	r3, [pc, #244]	; (80a98 <SystemCoreClockUpdate+0xf8>)
   809a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   809a4:	f003 0303 	and.w	r3, r3, #3
   809a8:	2b03      	cmp	r3, #3
   809aa:	d80e      	bhi.n	809ca <SystemCoreClockUpdate+0x2a>
   809ac:	e8df f003 	tbb	[pc, r3]
   809b0:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   809b4:	4b39      	ldr	r3, [pc, #228]	; (80a9c <SystemCoreClockUpdate+0xfc>)
   809b6:	695b      	ldr	r3, [r3, #20]
   809b8:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   809bc:	bf14      	ite	ne
   809be:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   809c2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   809c6:	4b36      	ldr	r3, [pc, #216]	; (80aa0 <SystemCoreClockUpdate+0x100>)
   809c8:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   809ca:	4b33      	ldr	r3, [pc, #204]	; (80a98 <SystemCoreClockUpdate+0xf8>)
   809cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   809ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
   809d2:	2b70      	cmp	r3, #112	; 0x70
   809d4:	d057      	beq.n	80a86 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   809d6:	4b30      	ldr	r3, [pc, #192]	; (80a98 <SystemCoreClockUpdate+0xf8>)
   809d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   809da:	4931      	ldr	r1, [pc, #196]	; (80aa0 <SystemCoreClockUpdate+0x100>)
   809dc:	f3c2 1202 	ubfx	r2, r2, #4, #3
   809e0:	680b      	ldr	r3, [r1, #0]
   809e2:	40d3      	lsrs	r3, r2
   809e4:	600b      	str	r3, [r1, #0]
   809e6:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   809e8:	4b2b      	ldr	r3, [pc, #172]	; (80a98 <SystemCoreClockUpdate+0xf8>)
   809ea:	6a1b      	ldr	r3, [r3, #32]
   809ec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   809f0:	d003      	beq.n	809fa <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   809f2:	4a2c      	ldr	r2, [pc, #176]	; (80aa4 <SystemCoreClockUpdate+0x104>)
   809f4:	4b2a      	ldr	r3, [pc, #168]	; (80aa0 <SystemCoreClockUpdate+0x100>)
   809f6:	601a      	str	r2, [r3, #0]
   809f8:	e7e7      	b.n	809ca <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   809fa:	4a2b      	ldr	r2, [pc, #172]	; (80aa8 <SystemCoreClockUpdate+0x108>)
   809fc:	4b28      	ldr	r3, [pc, #160]	; (80aa0 <SystemCoreClockUpdate+0x100>)
   809fe:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80a00:	4b25      	ldr	r3, [pc, #148]	; (80a98 <SystemCoreClockUpdate+0xf8>)
   80a02:	6a1b      	ldr	r3, [r3, #32]
   80a04:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80a08:	2b10      	cmp	r3, #16
   80a0a:	d005      	beq.n	80a18 <SystemCoreClockUpdate+0x78>
   80a0c:	2b20      	cmp	r3, #32
   80a0e:	d1dc      	bne.n	809ca <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80a10:	4a24      	ldr	r2, [pc, #144]	; (80aa4 <SystemCoreClockUpdate+0x104>)
   80a12:	4b23      	ldr	r3, [pc, #140]	; (80aa0 <SystemCoreClockUpdate+0x100>)
   80a14:	601a      	str	r2, [r3, #0]
				break;
   80a16:	e7d8      	b.n	809ca <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80a18:	4a24      	ldr	r2, [pc, #144]	; (80aac <SystemCoreClockUpdate+0x10c>)
   80a1a:	4b21      	ldr	r3, [pc, #132]	; (80aa0 <SystemCoreClockUpdate+0x100>)
   80a1c:	601a      	str	r2, [r3, #0]
				break;
   80a1e:	e7d4      	b.n	809ca <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80a20:	4b1d      	ldr	r3, [pc, #116]	; (80a98 <SystemCoreClockUpdate+0xf8>)
   80a22:	6a1b      	ldr	r3, [r3, #32]
   80a24:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80a28:	d00c      	beq.n	80a44 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80a2a:	4a1e      	ldr	r2, [pc, #120]	; (80aa4 <SystemCoreClockUpdate+0x104>)
   80a2c:	4b1c      	ldr	r3, [pc, #112]	; (80aa0 <SystemCoreClockUpdate+0x100>)
   80a2e:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80a30:	4b19      	ldr	r3, [pc, #100]	; (80a98 <SystemCoreClockUpdate+0xf8>)
   80a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a34:	f003 0303 	and.w	r3, r3, #3
   80a38:	2b02      	cmp	r3, #2
   80a3a:	d016      	beq.n	80a6a <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80a3c:	4a1c      	ldr	r2, [pc, #112]	; (80ab0 <SystemCoreClockUpdate+0x110>)
   80a3e:	4b18      	ldr	r3, [pc, #96]	; (80aa0 <SystemCoreClockUpdate+0x100>)
   80a40:	601a      	str	r2, [r3, #0]
   80a42:	e7c2      	b.n	809ca <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80a44:	4a18      	ldr	r2, [pc, #96]	; (80aa8 <SystemCoreClockUpdate+0x108>)
   80a46:	4b16      	ldr	r3, [pc, #88]	; (80aa0 <SystemCoreClockUpdate+0x100>)
   80a48:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80a4a:	4b13      	ldr	r3, [pc, #76]	; (80a98 <SystemCoreClockUpdate+0xf8>)
   80a4c:	6a1b      	ldr	r3, [r3, #32]
   80a4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80a52:	2b10      	cmp	r3, #16
   80a54:	d005      	beq.n	80a62 <SystemCoreClockUpdate+0xc2>
   80a56:	2b20      	cmp	r3, #32
   80a58:	d1ea      	bne.n	80a30 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80a5a:	4a12      	ldr	r2, [pc, #72]	; (80aa4 <SystemCoreClockUpdate+0x104>)
   80a5c:	4b10      	ldr	r3, [pc, #64]	; (80aa0 <SystemCoreClockUpdate+0x100>)
   80a5e:	601a      	str	r2, [r3, #0]
				break;
   80a60:	e7e6      	b.n	80a30 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80a62:	4a12      	ldr	r2, [pc, #72]	; (80aac <SystemCoreClockUpdate+0x10c>)
   80a64:	4b0e      	ldr	r3, [pc, #56]	; (80aa0 <SystemCoreClockUpdate+0x100>)
   80a66:	601a      	str	r2, [r3, #0]
				break;
   80a68:	e7e2      	b.n	80a30 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80a6a:	4a0b      	ldr	r2, [pc, #44]	; (80a98 <SystemCoreClockUpdate+0xf8>)
   80a6c:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80a6e:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80a70:	480b      	ldr	r0, [pc, #44]	; (80aa0 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80a72:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80a76:	6803      	ldr	r3, [r0, #0]
   80a78:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80a7c:	b2d2      	uxtb	r2, r2
   80a7e:	fbb3 f3f2 	udiv	r3, r3, r2
   80a82:	6003      	str	r3, [r0, #0]
   80a84:	e7a1      	b.n	809ca <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80a86:	4a06      	ldr	r2, [pc, #24]	; (80aa0 <SystemCoreClockUpdate+0x100>)
   80a88:	6813      	ldr	r3, [r2, #0]
   80a8a:	490a      	ldr	r1, [pc, #40]	; (80ab4 <SystemCoreClockUpdate+0x114>)
   80a8c:	fba1 1303 	umull	r1, r3, r1, r3
   80a90:	085b      	lsrs	r3, r3, #1
   80a92:	6013      	str	r3, [r2, #0]
   80a94:	4770      	bx	lr
   80a96:	bf00      	nop
   80a98:	400e0600 	.word	0x400e0600
   80a9c:	400e1a10 	.word	0x400e1a10
   80aa0:	2007012c 	.word	0x2007012c
   80aa4:	00b71b00 	.word	0x00b71b00
   80aa8:	003d0900 	.word	0x003d0900
   80aac:	007a1200 	.word	0x007a1200
   80ab0:	0e4e1c00 	.word	0x0e4e1c00
   80ab4:	aaaaaaab 	.word	0xaaaaaaab

00080ab8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80ab8:	4b0a      	ldr	r3, [pc, #40]	; (80ae4 <_sbrk+0x2c>)
   80aba:	681b      	ldr	r3, [r3, #0]
   80abc:	b153      	cbz	r3, 80ad4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   80abe:	4b09      	ldr	r3, [pc, #36]	; (80ae4 <_sbrk+0x2c>)
   80ac0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80ac2:	181a      	adds	r2, r3, r0
   80ac4:	4908      	ldr	r1, [pc, #32]	; (80ae8 <_sbrk+0x30>)
   80ac6:	4291      	cmp	r1, r2
   80ac8:	db08      	blt.n	80adc <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   80aca:	4610      	mov	r0, r2
   80acc:	4a05      	ldr	r2, [pc, #20]	; (80ae4 <_sbrk+0x2c>)
   80ace:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80ad0:	4618      	mov	r0, r3
   80ad2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   80ad4:	4a05      	ldr	r2, [pc, #20]	; (80aec <_sbrk+0x34>)
   80ad6:	4b03      	ldr	r3, [pc, #12]	; (80ae4 <_sbrk+0x2c>)
   80ad8:	601a      	str	r2, [r3, #0]
   80ada:	e7f0      	b.n	80abe <_sbrk+0x6>
		return (caddr_t) -1;	
   80adc:	f04f 30ff 	mov.w	r0, #4294967295
}
   80ae0:	4770      	bx	lr
   80ae2:	bf00      	nop
   80ae4:	20070a04 	.word	0x20070a04
   80ae8:	20087ffc 	.word	0x20087ffc
   80aec:	20072a70 	.word	0x20072a70

00080af0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80af0:	f04f 30ff 	mov.w	r0, #4294967295
   80af4:	4770      	bx	lr

00080af6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80af6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80afa:	604b      	str	r3, [r1, #4]

	return 0;
}
   80afc:	2000      	movs	r0, #0
   80afe:	4770      	bx	lr

00080b00 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80b00:	2001      	movs	r0, #1
   80b02:	4770      	bx	lr

00080b04 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80b04:	2000      	movs	r0, #0
   80b06:	4770      	bx	lr

00080b08 <__libc_init_array>:
   80b08:	b570      	push	{r4, r5, r6, lr}
   80b0a:	4e0f      	ldr	r6, [pc, #60]	; (80b48 <__libc_init_array+0x40>)
   80b0c:	4d0f      	ldr	r5, [pc, #60]	; (80b4c <__libc_init_array+0x44>)
   80b0e:	1b76      	subs	r6, r6, r5
   80b10:	10b6      	asrs	r6, r6, #2
   80b12:	bf18      	it	ne
   80b14:	2400      	movne	r4, #0
   80b16:	d005      	beq.n	80b24 <__libc_init_array+0x1c>
   80b18:	3401      	adds	r4, #1
   80b1a:	f855 3b04 	ldr.w	r3, [r5], #4
   80b1e:	4798      	blx	r3
   80b20:	42a6      	cmp	r6, r4
   80b22:	d1f9      	bne.n	80b18 <__libc_init_array+0x10>
   80b24:	4e0a      	ldr	r6, [pc, #40]	; (80b50 <__libc_init_array+0x48>)
   80b26:	4d0b      	ldr	r5, [pc, #44]	; (80b54 <__libc_init_array+0x4c>)
   80b28:	f001 fdf8 	bl	8271c <_init>
   80b2c:	1b76      	subs	r6, r6, r5
   80b2e:	10b6      	asrs	r6, r6, #2
   80b30:	bf18      	it	ne
   80b32:	2400      	movne	r4, #0
   80b34:	d006      	beq.n	80b44 <__libc_init_array+0x3c>
   80b36:	3401      	adds	r4, #1
   80b38:	f855 3b04 	ldr.w	r3, [r5], #4
   80b3c:	4798      	blx	r3
   80b3e:	42a6      	cmp	r6, r4
   80b40:	d1f9      	bne.n	80b36 <__libc_init_array+0x2e>
   80b42:	bd70      	pop	{r4, r5, r6, pc}
   80b44:	bd70      	pop	{r4, r5, r6, pc}
   80b46:	bf00      	nop
   80b48:	00082728 	.word	0x00082728
   80b4c:	00082728 	.word	0x00082728
   80b50:	00082730 	.word	0x00082730
   80b54:	00082728 	.word	0x00082728

00080b58 <memset>:
   80b58:	b470      	push	{r4, r5, r6}
   80b5a:	0786      	lsls	r6, r0, #30
   80b5c:	d046      	beq.n	80bec <memset+0x94>
   80b5e:	1e54      	subs	r4, r2, #1
   80b60:	2a00      	cmp	r2, #0
   80b62:	d041      	beq.n	80be8 <memset+0x90>
   80b64:	b2ca      	uxtb	r2, r1
   80b66:	4603      	mov	r3, r0
   80b68:	e002      	b.n	80b70 <memset+0x18>
   80b6a:	f114 34ff 	adds.w	r4, r4, #4294967295
   80b6e:	d33b      	bcc.n	80be8 <memset+0x90>
   80b70:	f803 2b01 	strb.w	r2, [r3], #1
   80b74:	079d      	lsls	r5, r3, #30
   80b76:	d1f8      	bne.n	80b6a <memset+0x12>
   80b78:	2c03      	cmp	r4, #3
   80b7a:	d92e      	bls.n	80bda <memset+0x82>
   80b7c:	b2cd      	uxtb	r5, r1
   80b7e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   80b82:	2c0f      	cmp	r4, #15
   80b84:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   80b88:	d919      	bls.n	80bbe <memset+0x66>
   80b8a:	4626      	mov	r6, r4
   80b8c:	f103 0210 	add.w	r2, r3, #16
   80b90:	3e10      	subs	r6, #16
   80b92:	2e0f      	cmp	r6, #15
   80b94:	f842 5c10 	str.w	r5, [r2, #-16]
   80b98:	f842 5c0c 	str.w	r5, [r2, #-12]
   80b9c:	f842 5c08 	str.w	r5, [r2, #-8]
   80ba0:	f842 5c04 	str.w	r5, [r2, #-4]
   80ba4:	f102 0210 	add.w	r2, r2, #16
   80ba8:	d8f2      	bhi.n	80b90 <memset+0x38>
   80baa:	f1a4 0210 	sub.w	r2, r4, #16
   80bae:	f022 020f 	bic.w	r2, r2, #15
   80bb2:	f004 040f 	and.w	r4, r4, #15
   80bb6:	3210      	adds	r2, #16
   80bb8:	2c03      	cmp	r4, #3
   80bba:	4413      	add	r3, r2
   80bbc:	d90d      	bls.n	80bda <memset+0x82>
   80bbe:	461e      	mov	r6, r3
   80bc0:	4622      	mov	r2, r4
   80bc2:	3a04      	subs	r2, #4
   80bc4:	2a03      	cmp	r2, #3
   80bc6:	f846 5b04 	str.w	r5, [r6], #4
   80bca:	d8fa      	bhi.n	80bc2 <memset+0x6a>
   80bcc:	1f22      	subs	r2, r4, #4
   80bce:	f022 0203 	bic.w	r2, r2, #3
   80bd2:	3204      	adds	r2, #4
   80bd4:	4413      	add	r3, r2
   80bd6:	f004 0403 	and.w	r4, r4, #3
   80bda:	b12c      	cbz	r4, 80be8 <memset+0x90>
   80bdc:	b2c9      	uxtb	r1, r1
   80bde:	441c      	add	r4, r3
   80be0:	f803 1b01 	strb.w	r1, [r3], #1
   80be4:	429c      	cmp	r4, r3
   80be6:	d1fb      	bne.n	80be0 <memset+0x88>
   80be8:	bc70      	pop	{r4, r5, r6}
   80bea:	4770      	bx	lr
   80bec:	4614      	mov	r4, r2
   80bee:	4603      	mov	r3, r0
   80bf0:	e7c2      	b.n	80b78 <memset+0x20>
   80bf2:	bf00      	nop

00080bf4 <_puts_r>:
   80bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   80bf6:	4605      	mov	r5, r0
   80bf8:	b089      	sub	sp, #36	; 0x24
   80bfa:	4608      	mov	r0, r1
   80bfc:	460c      	mov	r4, r1
   80bfe:	2701      	movs	r7, #1
   80c00:	f000 f91e 	bl	80e40 <strlen>
   80c04:	2602      	movs	r6, #2
   80c06:	19c3      	adds	r3, r0, r7
   80c08:	4920      	ldr	r1, [pc, #128]	; (80c8c <_puts_r+0x98>)
   80c0a:	9303      	str	r3, [sp, #12]
   80c0c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   80c0e:	aa04      	add	r2, sp, #16
   80c10:	9404      	str	r4, [sp, #16]
   80c12:	9005      	str	r0, [sp, #20]
   80c14:	68ac      	ldr	r4, [r5, #8]
   80c16:	9707      	str	r7, [sp, #28]
   80c18:	9602      	str	r6, [sp, #8]
   80c1a:	9106      	str	r1, [sp, #24]
   80c1c:	9201      	str	r2, [sp, #4]
   80c1e:	b353      	cbz	r3, 80c76 <_puts_r+0x82>
   80c20:	6e63      	ldr	r3, [r4, #100]	; 0x64
   80c22:	f013 0f01 	tst.w	r3, #1
   80c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   80c2a:	b29a      	uxth	r2, r3
   80c2c:	d101      	bne.n	80c32 <_puts_r+0x3e>
   80c2e:	0590      	lsls	r0, r2, #22
   80c30:	d525      	bpl.n	80c7e <_puts_r+0x8a>
   80c32:	0491      	lsls	r1, r2, #18
   80c34:	d406      	bmi.n	80c44 <_puts_r+0x50>
   80c36:	6e62      	ldr	r2, [r4, #100]	; 0x64
   80c38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   80c3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   80c40:	81a3      	strh	r3, [r4, #12]
   80c42:	6662      	str	r2, [r4, #100]	; 0x64
   80c44:	4628      	mov	r0, r5
   80c46:	aa01      	add	r2, sp, #4
   80c48:	4621      	mov	r1, r4
   80c4a:	f000 fc1b 	bl	81484 <__sfvwrite_r>
   80c4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   80c50:	2800      	cmp	r0, #0
   80c52:	bf0c      	ite	eq
   80c54:	250a      	moveq	r5, #10
   80c56:	f04f 35ff 	movne.w	r5, #4294967295
   80c5a:	07da      	lsls	r2, r3, #31
   80c5c:	d402      	bmi.n	80c64 <_puts_r+0x70>
   80c5e:	89a3      	ldrh	r3, [r4, #12]
   80c60:	059b      	lsls	r3, r3, #22
   80c62:	d502      	bpl.n	80c6a <_puts_r+0x76>
   80c64:	4628      	mov	r0, r5
   80c66:	b009      	add	sp, #36	; 0x24
   80c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80c6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   80c6c:	f000 fdb2 	bl	817d4 <__retarget_lock_release_recursive>
   80c70:	4628      	mov	r0, r5
   80c72:	b009      	add	sp, #36	; 0x24
   80c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80c76:	4628      	mov	r0, r5
   80c78:	f000 fa78 	bl	8116c <__sinit>
   80c7c:	e7d0      	b.n	80c20 <_puts_r+0x2c>
   80c7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   80c80:	f000 fda6 	bl	817d0 <__retarget_lock_acquire_recursive>
   80c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   80c88:	b29a      	uxth	r2, r3
   80c8a:	e7d2      	b.n	80c32 <_puts_r+0x3e>
   80c8c:	00082718 	.word	0x00082718

00080c90 <puts>:
   80c90:	4b02      	ldr	r3, [pc, #8]	; (80c9c <puts+0xc>)
   80c92:	4601      	mov	r1, r0
   80c94:	6818      	ldr	r0, [r3, #0]
   80c96:	f7ff bfad 	b.w	80bf4 <_puts_r>
   80c9a:	bf00      	nop
   80c9c:	20070130 	.word	0x20070130

00080ca0 <setbuf>:
   80ca0:	2900      	cmp	r1, #0
   80ca2:	bf0c      	ite	eq
   80ca4:	2202      	moveq	r2, #2
   80ca6:	2200      	movne	r2, #0
   80ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80cac:	f000 b800 	b.w	80cb0 <setvbuf>

00080cb0 <setvbuf>:
   80cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80cb4:	4d61      	ldr	r5, [pc, #388]	; (80e3c <setvbuf+0x18c>)
   80cb6:	b083      	sub	sp, #12
   80cb8:	682d      	ldr	r5, [r5, #0]
   80cba:	4604      	mov	r4, r0
   80cbc:	460f      	mov	r7, r1
   80cbe:	4690      	mov	r8, r2
   80cc0:	461e      	mov	r6, r3
   80cc2:	b115      	cbz	r5, 80cca <setvbuf+0x1a>
   80cc4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   80cc6:	2b00      	cmp	r3, #0
   80cc8:	d064      	beq.n	80d94 <setvbuf+0xe4>
   80cca:	f1b8 0f02 	cmp.w	r8, #2
   80cce:	d006      	beq.n	80cde <setvbuf+0x2e>
   80cd0:	f1b8 0f01 	cmp.w	r8, #1
   80cd4:	f200 809f 	bhi.w	80e16 <setvbuf+0x166>
   80cd8:	2e00      	cmp	r6, #0
   80cda:	f2c0 809c 	blt.w	80e16 <setvbuf+0x166>
   80cde:	6e63      	ldr	r3, [r4, #100]	; 0x64
   80ce0:	07d8      	lsls	r0, r3, #31
   80ce2:	d534      	bpl.n	80d4e <setvbuf+0x9e>
   80ce4:	4621      	mov	r1, r4
   80ce6:	4628      	mov	r0, r5
   80ce8:	f000 f9e8 	bl	810bc <_fflush_r>
   80cec:	6b21      	ldr	r1, [r4, #48]	; 0x30
   80cee:	b141      	cbz	r1, 80d02 <setvbuf+0x52>
   80cf0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   80cf4:	4299      	cmp	r1, r3
   80cf6:	d002      	beq.n	80cfe <setvbuf+0x4e>
   80cf8:	4628      	mov	r0, r5
   80cfa:	f000 fadd 	bl	812b8 <_free_r>
   80cfe:	2300      	movs	r3, #0
   80d00:	6323      	str	r3, [r4, #48]	; 0x30
   80d02:	2200      	movs	r2, #0
   80d04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   80d08:	61a2      	str	r2, [r4, #24]
   80d0a:	6062      	str	r2, [r4, #4]
   80d0c:	061a      	lsls	r2, r3, #24
   80d0e:	d43a      	bmi.n	80d86 <setvbuf+0xd6>
   80d10:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   80d14:	f023 0303 	bic.w	r3, r3, #3
   80d18:	f1b8 0f02 	cmp.w	r8, #2
   80d1c:	81a3      	strh	r3, [r4, #12]
   80d1e:	d01d      	beq.n	80d5c <setvbuf+0xac>
   80d20:	ab01      	add	r3, sp, #4
   80d22:	466a      	mov	r2, sp
   80d24:	4621      	mov	r1, r4
   80d26:	4628      	mov	r0, r5
   80d28:	f000 fd56 	bl	817d8 <__swhatbuf_r>
   80d2c:	89a3      	ldrh	r3, [r4, #12]
   80d2e:	4318      	orrs	r0, r3
   80d30:	81a0      	strh	r0, [r4, #12]
   80d32:	2e00      	cmp	r6, #0
   80d34:	d132      	bne.n	80d9c <setvbuf+0xec>
   80d36:	9e00      	ldr	r6, [sp, #0]
   80d38:	4630      	mov	r0, r6
   80d3a:	f000 fdc5 	bl	818c8 <malloc>
   80d3e:	4607      	mov	r7, r0
   80d40:	2800      	cmp	r0, #0
   80d42:	d06b      	beq.n	80e1c <setvbuf+0x16c>
   80d44:	89a3      	ldrh	r3, [r4, #12]
   80d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   80d4a:	81a3      	strh	r3, [r4, #12]
   80d4c:	e028      	b.n	80da0 <setvbuf+0xf0>
   80d4e:	89a3      	ldrh	r3, [r4, #12]
   80d50:	0599      	lsls	r1, r3, #22
   80d52:	d4c7      	bmi.n	80ce4 <setvbuf+0x34>
   80d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
   80d56:	f000 fd3b 	bl	817d0 <__retarget_lock_acquire_recursive>
   80d5a:	e7c3      	b.n	80ce4 <setvbuf+0x34>
   80d5c:	2500      	movs	r5, #0
   80d5e:	2600      	movs	r6, #0
   80d60:	2001      	movs	r0, #1
   80d62:	6e61      	ldr	r1, [r4, #100]	; 0x64
   80d64:	f104 0243 	add.w	r2, r4, #67	; 0x43
   80d68:	f043 0302 	orr.w	r3, r3, #2
   80d6c:	60a6      	str	r6, [r4, #8]
   80d6e:	07ce      	lsls	r6, r1, #31
   80d70:	81a3      	strh	r3, [r4, #12]
   80d72:	6160      	str	r0, [r4, #20]
   80d74:	6022      	str	r2, [r4, #0]
   80d76:	6122      	str	r2, [r4, #16]
   80d78:	d401      	bmi.n	80d7e <setvbuf+0xce>
   80d7a:	0598      	lsls	r0, r3, #22
   80d7c:	d53e      	bpl.n	80dfc <setvbuf+0x14c>
   80d7e:	4628      	mov	r0, r5
   80d80:	b003      	add	sp, #12
   80d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80d86:	6921      	ldr	r1, [r4, #16]
   80d88:	4628      	mov	r0, r5
   80d8a:	f000 fa95 	bl	812b8 <_free_r>
   80d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   80d92:	e7bd      	b.n	80d10 <setvbuf+0x60>
   80d94:	4628      	mov	r0, r5
   80d96:	f000 f9e9 	bl	8116c <__sinit>
   80d9a:	e796      	b.n	80cca <setvbuf+0x1a>
   80d9c:	2f00      	cmp	r7, #0
   80d9e:	d0cb      	beq.n	80d38 <setvbuf+0x88>
   80da0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   80da2:	2b00      	cmp	r3, #0
   80da4:	d033      	beq.n	80e0e <setvbuf+0x15e>
   80da6:	9b00      	ldr	r3, [sp, #0]
   80da8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   80dac:	429e      	cmp	r6, r3
   80dae:	bf1c      	itt	ne
   80db0:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   80db4:	81a2      	strhne	r2, [r4, #12]
   80db6:	f1b8 0f01 	cmp.w	r8, #1
   80dba:	bf04      	itt	eq
   80dbc:	f042 0201 	orreq.w	r2, r2, #1
   80dc0:	81a2      	strheq	r2, [r4, #12]
   80dc2:	b292      	uxth	r2, r2
   80dc4:	f012 0308 	ands.w	r3, r2, #8
   80dc8:	6027      	str	r7, [r4, #0]
   80dca:	6127      	str	r7, [r4, #16]
   80dcc:	6166      	str	r6, [r4, #20]
   80dce:	d00e      	beq.n	80dee <setvbuf+0x13e>
   80dd0:	07d1      	lsls	r1, r2, #31
   80dd2:	d51a      	bpl.n	80e0a <setvbuf+0x15a>
   80dd4:	2300      	movs	r3, #0
   80dd6:	6e65      	ldr	r5, [r4, #100]	; 0x64
   80dd8:	4276      	negs	r6, r6
   80dda:	f015 0501 	ands.w	r5, r5, #1
   80dde:	61a6      	str	r6, [r4, #24]
   80de0:	60a3      	str	r3, [r4, #8]
   80de2:	d009      	beq.n	80df8 <setvbuf+0x148>
   80de4:	2500      	movs	r5, #0
   80de6:	4628      	mov	r0, r5
   80de8:	b003      	add	sp, #12
   80dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80dee:	60a3      	str	r3, [r4, #8]
   80df0:	6e65      	ldr	r5, [r4, #100]	; 0x64
   80df2:	f015 0501 	ands.w	r5, r5, #1
   80df6:	d1f5      	bne.n	80de4 <setvbuf+0x134>
   80df8:	0593      	lsls	r3, r2, #22
   80dfa:	d4c0      	bmi.n	80d7e <setvbuf+0xce>
   80dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   80dfe:	f000 fce9 	bl	817d4 <__retarget_lock_release_recursive>
   80e02:	4628      	mov	r0, r5
   80e04:	b003      	add	sp, #12
   80e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80e0a:	60a6      	str	r6, [r4, #8]
   80e0c:	e7f0      	b.n	80df0 <setvbuf+0x140>
   80e0e:	4628      	mov	r0, r5
   80e10:	f000 f9ac 	bl	8116c <__sinit>
   80e14:	e7c7      	b.n	80da6 <setvbuf+0xf6>
   80e16:	f04f 35ff 	mov.w	r5, #4294967295
   80e1a:	e7b0      	b.n	80d7e <setvbuf+0xce>
   80e1c:	f8dd 9000 	ldr.w	r9, [sp]
   80e20:	45b1      	cmp	r9, r6
   80e22:	d004      	beq.n	80e2e <setvbuf+0x17e>
   80e24:	4648      	mov	r0, r9
   80e26:	f000 fd4f 	bl	818c8 <malloc>
   80e2a:	4607      	mov	r7, r0
   80e2c:	b920      	cbnz	r0, 80e38 <setvbuf+0x188>
   80e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   80e32:	f04f 35ff 	mov.w	r5, #4294967295
   80e36:	e792      	b.n	80d5e <setvbuf+0xae>
   80e38:	464e      	mov	r6, r9
   80e3a:	e783      	b.n	80d44 <setvbuf+0x94>
   80e3c:	20070130 	.word	0x20070130

00080e40 <strlen>:
   80e40:	f020 0103 	bic.w	r1, r0, #3
   80e44:	f010 0003 	ands.w	r0, r0, #3
   80e48:	f1c0 0000 	rsb	r0, r0, #0
   80e4c:	f851 3b04 	ldr.w	r3, [r1], #4
   80e50:	f100 0c04 	add.w	ip, r0, #4
   80e54:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   80e58:	f06f 0200 	mvn.w	r2, #0
   80e5c:	bf1c      	itt	ne
   80e5e:	fa22 f20c 	lsrne.w	r2, r2, ip
   80e62:	4313      	orrne	r3, r2
   80e64:	f04f 0c01 	mov.w	ip, #1
   80e68:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   80e6c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   80e70:	eba3 020c 	sub.w	r2, r3, ip
   80e74:	ea22 0203 	bic.w	r2, r2, r3
   80e78:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   80e7c:	bf04      	itt	eq
   80e7e:	f851 3b04 	ldreq.w	r3, [r1], #4
   80e82:	3004      	addeq	r0, #4
   80e84:	d0f4      	beq.n	80e70 <strlen+0x30>
   80e86:	f1c2 0100 	rsb	r1, r2, #0
   80e8a:	ea02 0201 	and.w	r2, r2, r1
   80e8e:	fab2 f282 	clz	r2, r2
   80e92:	f1c2 021f 	rsb	r2, r2, #31
   80e96:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   80e9a:	4770      	bx	lr

00080e9c <__swsetup_r>:
   80e9c:	b538      	push	{r3, r4, r5, lr}
   80e9e:	4b30      	ldr	r3, [pc, #192]	; (80f60 <__swsetup_r+0xc4>)
   80ea0:	4605      	mov	r5, r0
   80ea2:	6818      	ldr	r0, [r3, #0]
   80ea4:	460c      	mov	r4, r1
   80ea6:	b110      	cbz	r0, 80eae <__swsetup_r+0x12>
   80ea8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   80eaa:	2b00      	cmp	r3, #0
   80eac:	d038      	beq.n	80f20 <__swsetup_r+0x84>
   80eae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   80eb2:	b293      	uxth	r3, r2
   80eb4:	0718      	lsls	r0, r3, #28
   80eb6:	d50c      	bpl.n	80ed2 <__swsetup_r+0x36>
   80eb8:	6920      	ldr	r0, [r4, #16]
   80eba:	b1a8      	cbz	r0, 80ee8 <__swsetup_r+0x4c>
   80ebc:	f013 0201 	ands.w	r2, r3, #1
   80ec0:	d01e      	beq.n	80f00 <__swsetup_r+0x64>
   80ec2:	2200      	movs	r2, #0
   80ec4:	6963      	ldr	r3, [r4, #20]
   80ec6:	60a2      	str	r2, [r4, #8]
   80ec8:	425b      	negs	r3, r3
   80eca:	61a3      	str	r3, [r4, #24]
   80ecc:	b1f0      	cbz	r0, 80f0c <__swsetup_r+0x70>
   80ece:	2000      	movs	r0, #0
   80ed0:	bd38      	pop	{r3, r4, r5, pc}
   80ed2:	06d9      	lsls	r1, r3, #27
   80ed4:	d53b      	bpl.n	80f4e <__swsetup_r+0xb2>
   80ed6:	0758      	lsls	r0, r3, #29
   80ed8:	d425      	bmi.n	80f26 <__swsetup_r+0x8a>
   80eda:	6920      	ldr	r0, [r4, #16]
   80edc:	f042 0308 	orr.w	r3, r2, #8
   80ee0:	81a3      	strh	r3, [r4, #12]
   80ee2:	b29b      	uxth	r3, r3
   80ee4:	2800      	cmp	r0, #0
   80ee6:	d1e9      	bne.n	80ebc <__swsetup_r+0x20>
   80ee8:	f403 7220 	and.w	r2, r3, #640	; 0x280
   80eec:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   80ef0:	d0e4      	beq.n	80ebc <__swsetup_r+0x20>
   80ef2:	4628      	mov	r0, r5
   80ef4:	4621      	mov	r1, r4
   80ef6:	f000 fc9d 	bl	81834 <__smakebuf_r>
   80efa:	89a3      	ldrh	r3, [r4, #12]
   80efc:	6920      	ldr	r0, [r4, #16]
   80efe:	e7dd      	b.n	80ebc <__swsetup_r+0x20>
   80f00:	0799      	lsls	r1, r3, #30
   80f02:	bf58      	it	pl
   80f04:	6962      	ldrpl	r2, [r4, #20]
   80f06:	60a2      	str	r2, [r4, #8]
   80f08:	2800      	cmp	r0, #0
   80f0a:	d1e0      	bne.n	80ece <__swsetup_r+0x32>
   80f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   80f10:	061a      	lsls	r2, r3, #24
   80f12:	d5dd      	bpl.n	80ed0 <__swsetup_r+0x34>
   80f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   80f18:	81a3      	strh	r3, [r4, #12]
   80f1a:	f04f 30ff 	mov.w	r0, #4294967295
   80f1e:	bd38      	pop	{r3, r4, r5, pc}
   80f20:	f000 f924 	bl	8116c <__sinit>
   80f24:	e7c3      	b.n	80eae <__swsetup_r+0x12>
   80f26:	6b21      	ldr	r1, [r4, #48]	; 0x30
   80f28:	b151      	cbz	r1, 80f40 <__swsetup_r+0xa4>
   80f2a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   80f2e:	4299      	cmp	r1, r3
   80f30:	d004      	beq.n	80f3c <__swsetup_r+0xa0>
   80f32:	4628      	mov	r0, r5
   80f34:	f000 f9c0 	bl	812b8 <_free_r>
   80f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   80f3c:	2300      	movs	r3, #0
   80f3e:	6323      	str	r3, [r4, #48]	; 0x30
   80f40:	2300      	movs	r3, #0
   80f42:	6920      	ldr	r0, [r4, #16]
   80f44:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   80f48:	e884 0009 	stmia.w	r4, {r0, r3}
   80f4c:	e7c6      	b.n	80edc <__swsetup_r+0x40>
   80f4e:	2309      	movs	r3, #9
   80f50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   80f54:	602b      	str	r3, [r5, #0]
   80f56:	f04f 30ff 	mov.w	r0, #4294967295
   80f5a:	81a2      	strh	r2, [r4, #12]
   80f5c:	bd38      	pop	{r3, r4, r5, pc}
   80f5e:	bf00      	nop
   80f60:	20070130 	.word	0x20070130

00080f64 <register_fini>:
   80f64:	4b02      	ldr	r3, [pc, #8]	; (80f70 <register_fini+0xc>)
   80f66:	b113      	cbz	r3, 80f6e <register_fini+0xa>
   80f68:	4802      	ldr	r0, [pc, #8]	; (80f74 <register_fini+0x10>)
   80f6a:	f000 b805 	b.w	80f78 <atexit>
   80f6e:	4770      	bx	lr
   80f70:	00000000 	.word	0x00000000
   80f74:	000811e5 	.word	0x000811e5

00080f78 <atexit>:
   80f78:	2300      	movs	r3, #0
   80f7a:	4601      	mov	r1, r0
   80f7c:	461a      	mov	r2, r3
   80f7e:	4618      	mov	r0, r3
   80f80:	f001 ba9a 	b.w	824b8 <__register_exitproc>

00080f84 <__sflush_r>:
   80f84:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   80f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80f8c:	b29a      	uxth	r2, r3
   80f8e:	460d      	mov	r5, r1
   80f90:	0711      	lsls	r1, r2, #28
   80f92:	4680      	mov	r8, r0
   80f94:	d43a      	bmi.n	8100c <__sflush_r+0x88>
   80f96:	686a      	ldr	r2, [r5, #4]
   80f98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   80f9c:	2a00      	cmp	r2, #0
   80f9e:	81ab      	strh	r3, [r5, #12]
   80fa0:	dd70      	ble.n	81084 <__sflush_r+0x100>
   80fa2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   80fa4:	2c00      	cmp	r4, #0
   80fa6:	d04a      	beq.n	8103e <__sflush_r+0xba>
   80fa8:	2200      	movs	r2, #0
   80faa:	b29b      	uxth	r3, r3
   80fac:	f8d8 6000 	ldr.w	r6, [r8]
   80fb0:	f8c8 2000 	str.w	r2, [r8]
   80fb4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   80fb8:	d068      	beq.n	8108c <__sflush_r+0x108>
   80fba:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   80fbc:	075f      	lsls	r7, r3, #29
   80fbe:	d505      	bpl.n	80fcc <__sflush_r+0x48>
   80fc0:	6869      	ldr	r1, [r5, #4]
   80fc2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   80fc4:	1a52      	subs	r2, r2, r1
   80fc6:	b10b      	cbz	r3, 80fcc <__sflush_r+0x48>
   80fc8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   80fca:	1ad2      	subs	r2, r2, r3
   80fcc:	2300      	movs	r3, #0
   80fce:	69e9      	ldr	r1, [r5, #28]
   80fd0:	4640      	mov	r0, r8
   80fd2:	47a0      	blx	r4
   80fd4:	1c44      	adds	r4, r0, #1
   80fd6:	d03d      	beq.n	81054 <__sflush_r+0xd0>
   80fd8:	2100      	movs	r1, #0
   80fda:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   80fde:	692a      	ldr	r2, [r5, #16]
   80fe0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   80fe4:	81ab      	strh	r3, [r5, #12]
   80fe6:	04db      	lsls	r3, r3, #19
   80fe8:	6069      	str	r1, [r5, #4]
   80fea:	602a      	str	r2, [r5, #0]
   80fec:	d448      	bmi.n	81080 <__sflush_r+0xfc>
   80fee:	6b29      	ldr	r1, [r5, #48]	; 0x30
   80ff0:	f8c8 6000 	str.w	r6, [r8]
   80ff4:	b319      	cbz	r1, 8103e <__sflush_r+0xba>
   80ff6:	f105 0340 	add.w	r3, r5, #64	; 0x40
   80ffa:	4299      	cmp	r1, r3
   80ffc:	d002      	beq.n	81004 <__sflush_r+0x80>
   80ffe:	4640      	mov	r0, r8
   81000:	f000 f95a 	bl	812b8 <_free_r>
   81004:	2000      	movs	r0, #0
   81006:	6328      	str	r0, [r5, #48]	; 0x30
   81008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8100c:	692e      	ldr	r6, [r5, #16]
   8100e:	b1b6      	cbz	r6, 8103e <__sflush_r+0xba>
   81010:	0791      	lsls	r1, r2, #30
   81012:	bf18      	it	ne
   81014:	2300      	movne	r3, #0
   81016:	682c      	ldr	r4, [r5, #0]
   81018:	bf08      	it	eq
   8101a:	696b      	ldreq	r3, [r5, #20]
   8101c:	602e      	str	r6, [r5, #0]
   8101e:	1ba4      	subs	r4, r4, r6
   81020:	60ab      	str	r3, [r5, #8]
   81022:	e00a      	b.n	8103a <__sflush_r+0xb6>
   81024:	4623      	mov	r3, r4
   81026:	4632      	mov	r2, r6
   81028:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8102a:	69e9      	ldr	r1, [r5, #28]
   8102c:	4640      	mov	r0, r8
   8102e:	47b8      	blx	r7
   81030:	2800      	cmp	r0, #0
   81032:	eba4 0400 	sub.w	r4, r4, r0
   81036:	4406      	add	r6, r0
   81038:	dd04      	ble.n	81044 <__sflush_r+0xc0>
   8103a:	2c00      	cmp	r4, #0
   8103c:	dcf2      	bgt.n	81024 <__sflush_r+0xa0>
   8103e:	2000      	movs	r0, #0
   81040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81044:	89ab      	ldrh	r3, [r5, #12]
   81046:	f04f 30ff 	mov.w	r0, #4294967295
   8104a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8104e:	81ab      	strh	r3, [r5, #12]
   81050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81054:	f8d8 4000 	ldr.w	r4, [r8]
   81058:	2c1d      	cmp	r4, #29
   8105a:	d8f3      	bhi.n	81044 <__sflush_r+0xc0>
   8105c:	4b16      	ldr	r3, [pc, #88]	; (810b8 <__sflush_r+0x134>)
   8105e:	40e3      	lsrs	r3, r4
   81060:	43db      	mvns	r3, r3
   81062:	f013 0301 	ands.w	r3, r3, #1
   81066:	d1ed      	bne.n	81044 <__sflush_r+0xc0>
   81068:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   8106c:	6929      	ldr	r1, [r5, #16]
   8106e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   81072:	81aa      	strh	r2, [r5, #12]
   81074:	04d2      	lsls	r2, r2, #19
   81076:	606b      	str	r3, [r5, #4]
   81078:	6029      	str	r1, [r5, #0]
   8107a:	d5b8      	bpl.n	80fee <__sflush_r+0x6a>
   8107c:	2c00      	cmp	r4, #0
   8107e:	d1b6      	bne.n	80fee <__sflush_r+0x6a>
   81080:	6528      	str	r0, [r5, #80]	; 0x50
   81082:	e7b4      	b.n	80fee <__sflush_r+0x6a>
   81084:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   81086:	2a00      	cmp	r2, #0
   81088:	dc8b      	bgt.n	80fa2 <__sflush_r+0x1e>
   8108a:	e7d8      	b.n	8103e <__sflush_r+0xba>
   8108c:	2301      	movs	r3, #1
   8108e:	69e9      	ldr	r1, [r5, #28]
   81090:	4640      	mov	r0, r8
   81092:	47a0      	blx	r4
   81094:	1c43      	adds	r3, r0, #1
   81096:	4602      	mov	r2, r0
   81098:	d002      	beq.n	810a0 <__sflush_r+0x11c>
   8109a:	89ab      	ldrh	r3, [r5, #12]
   8109c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8109e:	e78d      	b.n	80fbc <__sflush_r+0x38>
   810a0:	f8d8 3000 	ldr.w	r3, [r8]
   810a4:	2b00      	cmp	r3, #0
   810a6:	d0f8      	beq.n	8109a <__sflush_r+0x116>
   810a8:	2b1d      	cmp	r3, #29
   810aa:	d001      	beq.n	810b0 <__sflush_r+0x12c>
   810ac:	2b16      	cmp	r3, #22
   810ae:	d1c9      	bne.n	81044 <__sflush_r+0xc0>
   810b0:	f8c8 6000 	str.w	r6, [r8]
   810b4:	e7c3      	b.n	8103e <__sflush_r+0xba>
   810b6:	bf00      	nop
   810b8:	20400001 	.word	0x20400001

000810bc <_fflush_r>:
   810bc:	b538      	push	{r3, r4, r5, lr}
   810be:	460d      	mov	r5, r1
   810c0:	4604      	mov	r4, r0
   810c2:	b108      	cbz	r0, 810c8 <_fflush_r+0xc>
   810c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   810c6:	b1bb      	cbz	r3, 810f8 <_fflush_r+0x3c>
   810c8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   810cc:	b188      	cbz	r0, 810f2 <_fflush_r+0x36>
   810ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   810d0:	07db      	lsls	r3, r3, #31
   810d2:	d401      	bmi.n	810d8 <_fflush_r+0x1c>
   810d4:	0581      	lsls	r1, r0, #22
   810d6:	d517      	bpl.n	81108 <_fflush_r+0x4c>
   810d8:	4620      	mov	r0, r4
   810da:	4629      	mov	r1, r5
   810dc:	f7ff ff52 	bl	80f84 <__sflush_r>
   810e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   810e2:	4604      	mov	r4, r0
   810e4:	07da      	lsls	r2, r3, #31
   810e6:	d402      	bmi.n	810ee <_fflush_r+0x32>
   810e8:	89ab      	ldrh	r3, [r5, #12]
   810ea:	059b      	lsls	r3, r3, #22
   810ec:	d507      	bpl.n	810fe <_fflush_r+0x42>
   810ee:	4620      	mov	r0, r4
   810f0:	bd38      	pop	{r3, r4, r5, pc}
   810f2:	4604      	mov	r4, r0
   810f4:	4620      	mov	r0, r4
   810f6:	bd38      	pop	{r3, r4, r5, pc}
   810f8:	f000 f838 	bl	8116c <__sinit>
   810fc:	e7e4      	b.n	810c8 <_fflush_r+0xc>
   810fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
   81100:	f000 fb68 	bl	817d4 <__retarget_lock_release_recursive>
   81104:	4620      	mov	r0, r4
   81106:	bd38      	pop	{r3, r4, r5, pc}
   81108:	6da8      	ldr	r0, [r5, #88]	; 0x58
   8110a:	f000 fb61 	bl	817d0 <__retarget_lock_acquire_recursive>
   8110e:	e7e3      	b.n	810d8 <_fflush_r+0x1c>

00081110 <_cleanup_r>:
   81110:	4901      	ldr	r1, [pc, #4]	; (81118 <_cleanup_r+0x8>)
   81112:	f000 bb31 	b.w	81778 <_fwalk_reent>
   81116:	bf00      	nop
   81118:	000825a1 	.word	0x000825a1

0008111c <std.isra.0>:
   8111c:	2300      	movs	r3, #0
   8111e:	b510      	push	{r4, lr}
   81120:	4604      	mov	r4, r0
   81122:	8181      	strh	r1, [r0, #12]
   81124:	81c2      	strh	r2, [r0, #14]
   81126:	6003      	str	r3, [r0, #0]
   81128:	6043      	str	r3, [r0, #4]
   8112a:	6083      	str	r3, [r0, #8]
   8112c:	6643      	str	r3, [r0, #100]	; 0x64
   8112e:	6103      	str	r3, [r0, #16]
   81130:	6143      	str	r3, [r0, #20]
   81132:	6183      	str	r3, [r0, #24]
   81134:	4619      	mov	r1, r3
   81136:	2208      	movs	r2, #8
   81138:	305c      	adds	r0, #92	; 0x5c
   8113a:	f7ff fd0d 	bl	80b58 <memset>
   8113e:	4807      	ldr	r0, [pc, #28]	; (8115c <std.isra.0+0x40>)
   81140:	4907      	ldr	r1, [pc, #28]	; (81160 <std.isra.0+0x44>)
   81142:	4a08      	ldr	r2, [pc, #32]	; (81164 <std.isra.0+0x48>)
   81144:	4b08      	ldr	r3, [pc, #32]	; (81168 <std.isra.0+0x4c>)
   81146:	6220      	str	r0, [r4, #32]
   81148:	61e4      	str	r4, [r4, #28]
   8114a:	6261      	str	r1, [r4, #36]	; 0x24
   8114c:	62a2      	str	r2, [r4, #40]	; 0x28
   8114e:	62e3      	str	r3, [r4, #44]	; 0x2c
   81150:	f104 0058 	add.w	r0, r4, #88	; 0x58
   81154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81158:	f000 bb36 	b.w	817c8 <__retarget_lock_init_recursive>
   8115c:	00082405 	.word	0x00082405
   81160:	00082429 	.word	0x00082429
   81164:	00082465 	.word	0x00082465
   81168:	00082485 	.word	0x00082485

0008116c <__sinit>:
   8116c:	b510      	push	{r4, lr}
   8116e:	4604      	mov	r4, r0
   81170:	4814      	ldr	r0, [pc, #80]	; (811c4 <__sinit+0x58>)
   81172:	f000 fb2d 	bl	817d0 <__retarget_lock_acquire_recursive>
   81176:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81178:	b9fa      	cbnz	r2, 811ba <__sinit+0x4e>
   8117a:	2003      	movs	r0, #3
   8117c:	4912      	ldr	r1, [pc, #72]	; (811c8 <__sinit+0x5c>)
   8117e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   81182:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   81186:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   8118a:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   8118e:	63e1      	str	r1, [r4, #60]	; 0x3c
   81190:	6860      	ldr	r0, [r4, #4]
   81192:	2104      	movs	r1, #4
   81194:	f7ff ffc2 	bl	8111c <std.isra.0>
   81198:	68a0      	ldr	r0, [r4, #8]
   8119a:	2201      	movs	r2, #1
   8119c:	2109      	movs	r1, #9
   8119e:	f7ff ffbd 	bl	8111c <std.isra.0>
   811a2:	68e0      	ldr	r0, [r4, #12]
   811a4:	2202      	movs	r2, #2
   811a6:	2112      	movs	r1, #18
   811a8:	f7ff ffb8 	bl	8111c <std.isra.0>
   811ac:	2301      	movs	r3, #1
   811ae:	4805      	ldr	r0, [pc, #20]	; (811c4 <__sinit+0x58>)
   811b0:	63a3      	str	r3, [r4, #56]	; 0x38
   811b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   811b6:	f000 bb0d 	b.w	817d4 <__retarget_lock_release_recursive>
   811ba:	4802      	ldr	r0, [pc, #8]	; (811c4 <__sinit+0x58>)
   811bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   811c0:	f000 bb08 	b.w	817d4 <__retarget_lock_release_recursive>
   811c4:	20070a54 	.word	0x20070a54
   811c8:	00081111 	.word	0x00081111

000811cc <__sfp_lock_acquire>:
   811cc:	4801      	ldr	r0, [pc, #4]	; (811d4 <__sfp_lock_acquire+0x8>)
   811ce:	f000 baff 	b.w	817d0 <__retarget_lock_acquire_recursive>
   811d2:	bf00      	nop
   811d4:	20070a68 	.word	0x20070a68

000811d8 <__sfp_lock_release>:
   811d8:	4801      	ldr	r0, [pc, #4]	; (811e0 <__sfp_lock_release+0x8>)
   811da:	f000 bafb 	b.w	817d4 <__retarget_lock_release_recursive>
   811de:	bf00      	nop
   811e0:	20070a68 	.word	0x20070a68

000811e4 <__libc_fini_array>:
   811e4:	b538      	push	{r3, r4, r5, lr}
   811e6:	4c0a      	ldr	r4, [pc, #40]	; (81210 <__libc_fini_array+0x2c>)
   811e8:	4d0a      	ldr	r5, [pc, #40]	; (81214 <__libc_fini_array+0x30>)
   811ea:	1b64      	subs	r4, r4, r5
   811ec:	10a4      	asrs	r4, r4, #2
   811ee:	d00a      	beq.n	81206 <__libc_fini_array+0x22>
   811f0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   811f4:	3b01      	subs	r3, #1
   811f6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   811fa:	3c01      	subs	r4, #1
   811fc:	f855 3904 	ldr.w	r3, [r5], #-4
   81200:	4798      	blx	r3
   81202:	2c00      	cmp	r4, #0
   81204:	d1f9      	bne.n	811fa <__libc_fini_array+0x16>
   81206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8120a:	f001 ba91 	b.w	82730 <_fini>
   8120e:	bf00      	nop
   81210:	00082740 	.word	0x00082740
   81214:	0008273c 	.word	0x0008273c

00081218 <_malloc_trim_r>:
   81218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8121a:	460c      	mov	r4, r1
   8121c:	4f23      	ldr	r7, [pc, #140]	; (812ac <_malloc_trim_r+0x94>)
   8121e:	4606      	mov	r6, r0
   81220:	f000 ff1c 	bl	8205c <__malloc_lock>
   81224:	68bb      	ldr	r3, [r7, #8]
   81226:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8122a:	685d      	ldr	r5, [r3, #4]
   8122c:	310f      	adds	r1, #15
   8122e:	f025 0503 	bic.w	r5, r5, #3
   81232:	4429      	add	r1, r5
   81234:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   81238:	f021 010f 	bic.w	r1, r1, #15
   8123c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   81240:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   81244:	db07      	blt.n	81256 <_malloc_trim_r+0x3e>
   81246:	2100      	movs	r1, #0
   81248:	4630      	mov	r0, r6
   8124a:	f001 f8c9 	bl	823e0 <_sbrk_r>
   8124e:	68bb      	ldr	r3, [r7, #8]
   81250:	442b      	add	r3, r5
   81252:	4298      	cmp	r0, r3
   81254:	d004      	beq.n	81260 <_malloc_trim_r+0x48>
   81256:	4630      	mov	r0, r6
   81258:	f000 ff06 	bl	82068 <__malloc_unlock>
   8125c:	2000      	movs	r0, #0
   8125e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81260:	4261      	negs	r1, r4
   81262:	4630      	mov	r0, r6
   81264:	f001 f8bc 	bl	823e0 <_sbrk_r>
   81268:	3001      	adds	r0, #1
   8126a:	d00d      	beq.n	81288 <_malloc_trim_r+0x70>
   8126c:	4b10      	ldr	r3, [pc, #64]	; (812b0 <_malloc_trim_r+0x98>)
   8126e:	68ba      	ldr	r2, [r7, #8]
   81270:	6819      	ldr	r1, [r3, #0]
   81272:	1b2d      	subs	r5, r5, r4
   81274:	f045 0501 	orr.w	r5, r5, #1
   81278:	4630      	mov	r0, r6
   8127a:	1b09      	subs	r1, r1, r4
   8127c:	6055      	str	r5, [r2, #4]
   8127e:	6019      	str	r1, [r3, #0]
   81280:	f000 fef2 	bl	82068 <__malloc_unlock>
   81284:	2001      	movs	r0, #1
   81286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81288:	2100      	movs	r1, #0
   8128a:	4630      	mov	r0, r6
   8128c:	f001 f8a8 	bl	823e0 <_sbrk_r>
   81290:	68ba      	ldr	r2, [r7, #8]
   81292:	1a83      	subs	r3, r0, r2
   81294:	2b0f      	cmp	r3, #15
   81296:	ddde      	ble.n	81256 <_malloc_trim_r+0x3e>
   81298:	4c06      	ldr	r4, [pc, #24]	; (812b4 <_malloc_trim_r+0x9c>)
   8129a:	4905      	ldr	r1, [pc, #20]	; (812b0 <_malloc_trim_r+0x98>)
   8129c:	6824      	ldr	r4, [r4, #0]
   8129e:	f043 0301 	orr.w	r3, r3, #1
   812a2:	1b00      	subs	r0, r0, r4
   812a4:	6053      	str	r3, [r2, #4]
   812a6:	6008      	str	r0, [r1, #0]
   812a8:	e7d5      	b.n	81256 <_malloc_trim_r+0x3e>
   812aa:	bf00      	nop
   812ac:	20070564 	.word	0x20070564
   812b0:	20070a08 	.word	0x20070a08
   812b4:	2007096c 	.word	0x2007096c

000812b8 <_free_r>:
   812b8:	2900      	cmp	r1, #0
   812ba:	d044      	beq.n	81346 <_free_r+0x8e>
   812bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   812c0:	460d      	mov	r5, r1
   812c2:	4680      	mov	r8, r0
   812c4:	f000 feca 	bl	8205c <__malloc_lock>
   812c8:	f855 7c04 	ldr.w	r7, [r5, #-4]
   812cc:	4969      	ldr	r1, [pc, #420]	; (81474 <_free_r+0x1bc>)
   812ce:	f1a5 0408 	sub.w	r4, r5, #8
   812d2:	f027 0301 	bic.w	r3, r7, #1
   812d6:	18e2      	adds	r2, r4, r3
   812d8:	688e      	ldr	r6, [r1, #8]
   812da:	6850      	ldr	r0, [r2, #4]
   812dc:	42b2      	cmp	r2, r6
   812de:	f020 0003 	bic.w	r0, r0, #3
   812e2:	d05e      	beq.n	813a2 <_free_r+0xea>
   812e4:	07fe      	lsls	r6, r7, #31
   812e6:	6050      	str	r0, [r2, #4]
   812e8:	d40b      	bmi.n	81302 <_free_r+0x4a>
   812ea:	f855 7c08 	ldr.w	r7, [r5, #-8]
   812ee:	f101 0e08 	add.w	lr, r1, #8
   812f2:	1be4      	subs	r4, r4, r7
   812f4:	68a5      	ldr	r5, [r4, #8]
   812f6:	443b      	add	r3, r7
   812f8:	4575      	cmp	r5, lr
   812fa:	d06d      	beq.n	813d8 <_free_r+0x120>
   812fc:	68e7      	ldr	r7, [r4, #12]
   812fe:	60ef      	str	r7, [r5, #12]
   81300:	60bd      	str	r5, [r7, #8]
   81302:	1815      	adds	r5, r2, r0
   81304:	686d      	ldr	r5, [r5, #4]
   81306:	07ed      	lsls	r5, r5, #31
   81308:	d53e      	bpl.n	81388 <_free_r+0xd0>
   8130a:	f043 0201 	orr.w	r2, r3, #1
   8130e:	6062      	str	r2, [r4, #4]
   81310:	50e3      	str	r3, [r4, r3]
   81312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   81316:	d217      	bcs.n	81348 <_free_r+0x90>
   81318:	2201      	movs	r2, #1
   8131a:	08db      	lsrs	r3, r3, #3
   8131c:	1098      	asrs	r0, r3, #2
   8131e:	684d      	ldr	r5, [r1, #4]
   81320:	4413      	add	r3, r2
   81322:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   81326:	4082      	lsls	r2, r0
   81328:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   8132c:	432a      	orrs	r2, r5
   8132e:	3808      	subs	r0, #8
   81330:	60e0      	str	r0, [r4, #12]
   81332:	60a7      	str	r7, [r4, #8]
   81334:	604a      	str	r2, [r1, #4]
   81336:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   8133a:	60fc      	str	r4, [r7, #12]
   8133c:	4640      	mov	r0, r8
   8133e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   81342:	f000 be91 	b.w	82068 <__malloc_unlock>
   81346:	4770      	bx	lr
   81348:	0a5a      	lsrs	r2, r3, #9
   8134a:	2a04      	cmp	r2, #4
   8134c:	d852      	bhi.n	813f4 <_free_r+0x13c>
   8134e:	099a      	lsrs	r2, r3, #6
   81350:	f102 0739 	add.w	r7, r2, #57	; 0x39
   81354:	00ff      	lsls	r7, r7, #3
   81356:	f102 0538 	add.w	r5, r2, #56	; 0x38
   8135a:	19c8      	adds	r0, r1, r7
   8135c:	59ca      	ldr	r2, [r1, r7]
   8135e:	3808      	subs	r0, #8
   81360:	4290      	cmp	r0, r2
   81362:	d04f      	beq.n	81404 <_free_r+0x14c>
   81364:	6851      	ldr	r1, [r2, #4]
   81366:	f021 0103 	bic.w	r1, r1, #3
   8136a:	428b      	cmp	r3, r1
   8136c:	d232      	bcs.n	813d4 <_free_r+0x11c>
   8136e:	6892      	ldr	r2, [r2, #8]
   81370:	4290      	cmp	r0, r2
   81372:	d1f7      	bne.n	81364 <_free_r+0xac>
   81374:	68c3      	ldr	r3, [r0, #12]
   81376:	60a0      	str	r0, [r4, #8]
   81378:	60e3      	str	r3, [r4, #12]
   8137a:	609c      	str	r4, [r3, #8]
   8137c:	60c4      	str	r4, [r0, #12]
   8137e:	4640      	mov	r0, r8
   81380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   81384:	f000 be70 	b.w	82068 <__malloc_unlock>
   81388:	6895      	ldr	r5, [r2, #8]
   8138a:	4f3b      	ldr	r7, [pc, #236]	; (81478 <_free_r+0x1c0>)
   8138c:	4403      	add	r3, r0
   8138e:	42bd      	cmp	r5, r7
   81390:	d040      	beq.n	81414 <_free_r+0x15c>
   81392:	68d0      	ldr	r0, [r2, #12]
   81394:	f043 0201 	orr.w	r2, r3, #1
   81398:	60e8      	str	r0, [r5, #12]
   8139a:	6085      	str	r5, [r0, #8]
   8139c:	6062      	str	r2, [r4, #4]
   8139e:	50e3      	str	r3, [r4, r3]
   813a0:	e7b7      	b.n	81312 <_free_r+0x5a>
   813a2:	07ff      	lsls	r7, r7, #31
   813a4:	4403      	add	r3, r0
   813a6:	d407      	bmi.n	813b8 <_free_r+0x100>
   813a8:	f855 5c08 	ldr.w	r5, [r5, #-8]
   813ac:	1b64      	subs	r4, r4, r5
   813ae:	68e2      	ldr	r2, [r4, #12]
   813b0:	68a0      	ldr	r0, [r4, #8]
   813b2:	442b      	add	r3, r5
   813b4:	60c2      	str	r2, [r0, #12]
   813b6:	6090      	str	r0, [r2, #8]
   813b8:	4a30      	ldr	r2, [pc, #192]	; (8147c <_free_r+0x1c4>)
   813ba:	f043 0001 	orr.w	r0, r3, #1
   813be:	6812      	ldr	r2, [r2, #0]
   813c0:	6060      	str	r0, [r4, #4]
   813c2:	4293      	cmp	r3, r2
   813c4:	608c      	str	r4, [r1, #8]
   813c6:	d3b9      	bcc.n	8133c <_free_r+0x84>
   813c8:	4b2d      	ldr	r3, [pc, #180]	; (81480 <_free_r+0x1c8>)
   813ca:	4640      	mov	r0, r8
   813cc:	6819      	ldr	r1, [r3, #0]
   813ce:	f7ff ff23 	bl	81218 <_malloc_trim_r>
   813d2:	e7b3      	b.n	8133c <_free_r+0x84>
   813d4:	4610      	mov	r0, r2
   813d6:	e7cd      	b.n	81374 <_free_r+0xbc>
   813d8:	1811      	adds	r1, r2, r0
   813da:	6849      	ldr	r1, [r1, #4]
   813dc:	07c9      	lsls	r1, r1, #31
   813de:	d444      	bmi.n	8146a <_free_r+0x1b2>
   813e0:	6891      	ldr	r1, [r2, #8]
   813e2:	4403      	add	r3, r0
   813e4:	68d2      	ldr	r2, [r2, #12]
   813e6:	f043 0001 	orr.w	r0, r3, #1
   813ea:	60ca      	str	r2, [r1, #12]
   813ec:	6091      	str	r1, [r2, #8]
   813ee:	6060      	str	r0, [r4, #4]
   813f0:	50e3      	str	r3, [r4, r3]
   813f2:	e7a3      	b.n	8133c <_free_r+0x84>
   813f4:	2a14      	cmp	r2, #20
   813f6:	d816      	bhi.n	81426 <_free_r+0x16e>
   813f8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   813fc:	00ff      	lsls	r7, r7, #3
   813fe:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   81402:	e7aa      	b.n	8135a <_free_r+0xa2>
   81404:	2301      	movs	r3, #1
   81406:	10aa      	asrs	r2, r5, #2
   81408:	684d      	ldr	r5, [r1, #4]
   8140a:	4093      	lsls	r3, r2
   8140c:	432b      	orrs	r3, r5
   8140e:	604b      	str	r3, [r1, #4]
   81410:	4603      	mov	r3, r0
   81412:	e7b0      	b.n	81376 <_free_r+0xbe>
   81414:	f043 0201 	orr.w	r2, r3, #1
   81418:	614c      	str	r4, [r1, #20]
   8141a:	610c      	str	r4, [r1, #16]
   8141c:	60e5      	str	r5, [r4, #12]
   8141e:	60a5      	str	r5, [r4, #8]
   81420:	6062      	str	r2, [r4, #4]
   81422:	50e3      	str	r3, [r4, r3]
   81424:	e78a      	b.n	8133c <_free_r+0x84>
   81426:	2a54      	cmp	r2, #84	; 0x54
   81428:	d806      	bhi.n	81438 <_free_r+0x180>
   8142a:	0b1a      	lsrs	r2, r3, #12
   8142c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   81430:	00ff      	lsls	r7, r7, #3
   81432:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   81436:	e790      	b.n	8135a <_free_r+0xa2>
   81438:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8143c:	d806      	bhi.n	8144c <_free_r+0x194>
   8143e:	0bda      	lsrs	r2, r3, #15
   81440:	f102 0778 	add.w	r7, r2, #120	; 0x78
   81444:	00ff      	lsls	r7, r7, #3
   81446:	f102 0577 	add.w	r5, r2, #119	; 0x77
   8144a:	e786      	b.n	8135a <_free_r+0xa2>
   8144c:	f240 5054 	movw	r0, #1364	; 0x554
   81450:	4282      	cmp	r2, r0
   81452:	d806      	bhi.n	81462 <_free_r+0x1aa>
   81454:	0c9a      	lsrs	r2, r3, #18
   81456:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   8145a:	00ff      	lsls	r7, r7, #3
   8145c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   81460:	e77b      	b.n	8135a <_free_r+0xa2>
   81462:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   81466:	257e      	movs	r5, #126	; 0x7e
   81468:	e777      	b.n	8135a <_free_r+0xa2>
   8146a:	f043 0101 	orr.w	r1, r3, #1
   8146e:	6061      	str	r1, [r4, #4]
   81470:	6013      	str	r3, [r2, #0]
   81472:	e763      	b.n	8133c <_free_r+0x84>
   81474:	20070564 	.word	0x20070564
   81478:	2007056c 	.word	0x2007056c
   8147c:	20070970 	.word	0x20070970
   81480:	20070a38 	.word	0x20070a38

00081484 <__sfvwrite_r>:
   81484:	6893      	ldr	r3, [r2, #8]
   81486:	2b00      	cmp	r3, #0
   81488:	d071      	beq.n	8156e <__sfvwrite_r+0xea>
   8148a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8148e:	898b      	ldrh	r3, [r1, #12]
   81490:	b083      	sub	sp, #12
   81492:	460c      	mov	r4, r1
   81494:	0719      	lsls	r1, r3, #28
   81496:	9000      	str	r0, [sp, #0]
   81498:	4616      	mov	r6, r2
   8149a:	d525      	bpl.n	814e8 <__sfvwrite_r+0x64>
   8149c:	6922      	ldr	r2, [r4, #16]
   8149e:	b31a      	cbz	r2, 814e8 <__sfvwrite_r+0x64>
   814a0:	f013 0002 	ands.w	r0, r3, #2
   814a4:	6835      	ldr	r5, [r6, #0]
   814a6:	d02b      	beq.n	81500 <__sfvwrite_r+0x7c>
   814a8:	f04f 0900 	mov.w	r9, #0
   814ac:	46b0      	mov	r8, r6
   814ae:	464f      	mov	r7, r9
   814b0:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 81774 <__sfvwrite_r+0x2f0>
   814b4:	2f00      	cmp	r7, #0
   814b6:	d055      	beq.n	81564 <__sfvwrite_r+0xe0>
   814b8:	4557      	cmp	r7, sl
   814ba:	463b      	mov	r3, r7
   814bc:	464a      	mov	r2, r9
   814be:	bf28      	it	cs
   814c0:	4653      	movcs	r3, sl
   814c2:	69e1      	ldr	r1, [r4, #28]
   814c4:	9800      	ldr	r0, [sp, #0]
   814c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   814c8:	47b0      	blx	r6
   814ca:	2800      	cmp	r0, #0
   814cc:	dd56      	ble.n	8157c <__sfvwrite_r+0xf8>
   814ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
   814d2:	4481      	add	r9, r0
   814d4:	1a1b      	subs	r3, r3, r0
   814d6:	1a3f      	subs	r7, r7, r0
   814d8:	f8c8 3008 	str.w	r3, [r8, #8]
   814dc:	2b00      	cmp	r3, #0
   814de:	d1e9      	bne.n	814b4 <__sfvwrite_r+0x30>
   814e0:	2000      	movs	r0, #0
   814e2:	b003      	add	sp, #12
   814e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   814e8:	4621      	mov	r1, r4
   814ea:	9800      	ldr	r0, [sp, #0]
   814ec:	f7ff fcd6 	bl	80e9c <__swsetup_r>
   814f0:	2800      	cmp	r0, #0
   814f2:	f040 8135 	bne.w	81760 <__sfvwrite_r+0x2dc>
   814f6:	89a3      	ldrh	r3, [r4, #12]
   814f8:	6835      	ldr	r5, [r6, #0]
   814fa:	f013 0002 	ands.w	r0, r3, #2
   814fe:	d1d3      	bne.n	814a8 <__sfvwrite_r+0x24>
   81500:	f013 0901 	ands.w	r9, r3, #1
   81504:	d144      	bne.n	81590 <__sfvwrite_r+0x10c>
   81506:	464f      	mov	r7, r9
   81508:	9601      	str	r6, [sp, #4]
   8150a:	b337      	cbz	r7, 8155a <__sfvwrite_r+0xd6>
   8150c:	059a      	lsls	r2, r3, #22
   8150e:	f8d4 8008 	ldr.w	r8, [r4, #8]
   81512:	f140 8085 	bpl.w	81620 <__sfvwrite_r+0x19c>
   81516:	4547      	cmp	r7, r8
   81518:	46c3      	mov	fp, r8
   8151a:	f0c0 80ad 	bcc.w	81678 <__sfvwrite_r+0x1f4>
   8151e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   81522:	f040 80ae 	bne.w	81682 <__sfvwrite_r+0x1fe>
   81526:	46ba      	mov	sl, r7
   81528:	6820      	ldr	r0, [r4, #0]
   8152a:	465a      	mov	r2, fp
   8152c:	4649      	mov	r1, r9
   8152e:	f000 fd31 	bl	81f94 <memmove>
   81532:	68a2      	ldr	r2, [r4, #8]
   81534:	6823      	ldr	r3, [r4, #0]
   81536:	eba2 0208 	sub.w	r2, r2, r8
   8153a:	445b      	add	r3, fp
   8153c:	60a2      	str	r2, [r4, #8]
   8153e:	6023      	str	r3, [r4, #0]
   81540:	9a01      	ldr	r2, [sp, #4]
   81542:	44d1      	add	r9, sl
   81544:	6893      	ldr	r3, [r2, #8]
   81546:	eba7 070a 	sub.w	r7, r7, sl
   8154a:	eba3 030a 	sub.w	r3, r3, sl
   8154e:	6093      	str	r3, [r2, #8]
   81550:	2b00      	cmp	r3, #0
   81552:	d0c5      	beq.n	814e0 <__sfvwrite_r+0x5c>
   81554:	89a3      	ldrh	r3, [r4, #12]
   81556:	2f00      	cmp	r7, #0
   81558:	d1d8      	bne.n	8150c <__sfvwrite_r+0x88>
   8155a:	f8d5 9000 	ldr.w	r9, [r5]
   8155e:	686f      	ldr	r7, [r5, #4]
   81560:	3508      	adds	r5, #8
   81562:	e7d2      	b.n	8150a <__sfvwrite_r+0x86>
   81564:	f8d5 9000 	ldr.w	r9, [r5]
   81568:	686f      	ldr	r7, [r5, #4]
   8156a:	3508      	adds	r5, #8
   8156c:	e7a2      	b.n	814b4 <__sfvwrite_r+0x30>
   8156e:	2000      	movs	r0, #0
   81570:	4770      	bx	lr
   81572:	4621      	mov	r1, r4
   81574:	9800      	ldr	r0, [sp, #0]
   81576:	f7ff fda1 	bl	810bc <_fflush_r>
   8157a:	b378      	cbz	r0, 815dc <__sfvwrite_r+0x158>
   8157c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81580:	f04f 30ff 	mov.w	r0, #4294967295
   81584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81588:	81a3      	strh	r3, [r4, #12]
   8158a:	b003      	add	sp, #12
   8158c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81590:	4681      	mov	r9, r0
   81592:	4633      	mov	r3, r6
   81594:	464e      	mov	r6, r9
   81596:	46a8      	mov	r8, r5
   81598:	469a      	mov	sl, r3
   8159a:	464d      	mov	r5, r9
   8159c:	b356      	cbz	r6, 815f4 <__sfvwrite_r+0x170>
   8159e:	2800      	cmp	r0, #0
   815a0:	d032      	beq.n	81608 <__sfvwrite_r+0x184>
   815a2:	45b1      	cmp	r9, r6
   815a4:	46cb      	mov	fp, r9
   815a6:	bf28      	it	cs
   815a8:	46b3      	movcs	fp, r6
   815aa:	6820      	ldr	r0, [r4, #0]
   815ac:	6923      	ldr	r3, [r4, #16]
   815ae:	465f      	mov	r7, fp
   815b0:	4298      	cmp	r0, r3
   815b2:	6962      	ldr	r2, [r4, #20]
   815b4:	d904      	bls.n	815c0 <__sfvwrite_r+0x13c>
   815b6:	68a3      	ldr	r3, [r4, #8]
   815b8:	4413      	add	r3, r2
   815ba:	459b      	cmp	fp, r3
   815bc:	f300 80a8 	bgt.w	81710 <__sfvwrite_r+0x28c>
   815c0:	4593      	cmp	fp, r2
   815c2:	db4d      	blt.n	81660 <__sfvwrite_r+0x1dc>
   815c4:	4613      	mov	r3, r2
   815c6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   815c8:	462a      	mov	r2, r5
   815ca:	69e1      	ldr	r1, [r4, #28]
   815cc:	9800      	ldr	r0, [sp, #0]
   815ce:	47b8      	blx	r7
   815d0:	1e07      	subs	r7, r0, #0
   815d2:	ddd3      	ble.n	8157c <__sfvwrite_r+0xf8>
   815d4:	ebb9 0907 	subs.w	r9, r9, r7
   815d8:	d0cb      	beq.n	81572 <__sfvwrite_r+0xee>
   815da:	2001      	movs	r0, #1
   815dc:	f8da 3008 	ldr.w	r3, [sl, #8]
   815e0:	443d      	add	r5, r7
   815e2:	1bdb      	subs	r3, r3, r7
   815e4:	1bf6      	subs	r6, r6, r7
   815e6:	f8ca 3008 	str.w	r3, [sl, #8]
   815ea:	2b00      	cmp	r3, #0
   815ec:	f43f af78 	beq.w	814e0 <__sfvwrite_r+0x5c>
   815f0:	2e00      	cmp	r6, #0
   815f2:	d1d4      	bne.n	8159e <__sfvwrite_r+0x11a>
   815f4:	f108 0308 	add.w	r3, r8, #8
   815f8:	f853 6c04 	ldr.w	r6, [r3, #-4]
   815fc:	4698      	mov	r8, r3
   815fe:	f853 5c08 	ldr.w	r5, [r3, #-8]
   81602:	3308      	adds	r3, #8
   81604:	2e00      	cmp	r6, #0
   81606:	d0f7      	beq.n	815f8 <__sfvwrite_r+0x174>
   81608:	4632      	mov	r2, r6
   8160a:	210a      	movs	r1, #10
   8160c:	4628      	mov	r0, r5
   8160e:	f000 fc05 	bl	81e1c <memchr>
   81612:	2800      	cmp	r0, #0
   81614:	f000 80a1 	beq.w	8175a <__sfvwrite_r+0x2d6>
   81618:	3001      	adds	r0, #1
   8161a:	eba0 0905 	sub.w	r9, r0, r5
   8161e:	e7c0      	b.n	815a2 <__sfvwrite_r+0x11e>
   81620:	6820      	ldr	r0, [r4, #0]
   81622:	6923      	ldr	r3, [r4, #16]
   81624:	4298      	cmp	r0, r3
   81626:	d802      	bhi.n	8162e <__sfvwrite_r+0x1aa>
   81628:	6963      	ldr	r3, [r4, #20]
   8162a:	429f      	cmp	r7, r3
   8162c:	d25d      	bcs.n	816ea <__sfvwrite_r+0x266>
   8162e:	45b8      	cmp	r8, r7
   81630:	bf28      	it	cs
   81632:	46b8      	movcs	r8, r7
   81634:	4649      	mov	r1, r9
   81636:	4642      	mov	r2, r8
   81638:	f000 fcac 	bl	81f94 <memmove>
   8163c:	68a3      	ldr	r3, [r4, #8]
   8163e:	6822      	ldr	r2, [r4, #0]
   81640:	eba3 0308 	sub.w	r3, r3, r8
   81644:	4442      	add	r2, r8
   81646:	60a3      	str	r3, [r4, #8]
   81648:	6022      	str	r2, [r4, #0]
   8164a:	b10b      	cbz	r3, 81650 <__sfvwrite_r+0x1cc>
   8164c:	46c2      	mov	sl, r8
   8164e:	e777      	b.n	81540 <__sfvwrite_r+0xbc>
   81650:	4621      	mov	r1, r4
   81652:	9800      	ldr	r0, [sp, #0]
   81654:	f7ff fd32 	bl	810bc <_fflush_r>
   81658:	2800      	cmp	r0, #0
   8165a:	d18f      	bne.n	8157c <__sfvwrite_r+0xf8>
   8165c:	46c2      	mov	sl, r8
   8165e:	e76f      	b.n	81540 <__sfvwrite_r+0xbc>
   81660:	465a      	mov	r2, fp
   81662:	4629      	mov	r1, r5
   81664:	f000 fc96 	bl	81f94 <memmove>
   81668:	68a2      	ldr	r2, [r4, #8]
   8166a:	6823      	ldr	r3, [r4, #0]
   8166c:	eba2 020b 	sub.w	r2, r2, fp
   81670:	445b      	add	r3, fp
   81672:	60a2      	str	r2, [r4, #8]
   81674:	6023      	str	r3, [r4, #0]
   81676:	e7ad      	b.n	815d4 <__sfvwrite_r+0x150>
   81678:	46b8      	mov	r8, r7
   8167a:	46ba      	mov	sl, r7
   8167c:	46bb      	mov	fp, r7
   8167e:	6820      	ldr	r0, [r4, #0]
   81680:	e753      	b.n	8152a <__sfvwrite_r+0xa6>
   81682:	6962      	ldr	r2, [r4, #20]
   81684:	6820      	ldr	r0, [r4, #0]
   81686:	6921      	ldr	r1, [r4, #16]
   81688:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   8168c:	eba0 0a01 	sub.w	sl, r0, r1
   81690:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   81694:	f10a 0001 	add.w	r0, sl, #1
   81698:	ea4f 0868 	mov.w	r8, r8, asr #1
   8169c:	4438      	add	r0, r7
   8169e:	4540      	cmp	r0, r8
   816a0:	4642      	mov	r2, r8
   816a2:	bf84      	itt	hi
   816a4:	4680      	movhi	r8, r0
   816a6:	4642      	movhi	r2, r8
   816a8:	055b      	lsls	r3, r3, #21
   816aa:	d544      	bpl.n	81736 <__sfvwrite_r+0x2b2>
   816ac:	4611      	mov	r1, r2
   816ae:	9800      	ldr	r0, [sp, #0]
   816b0:	f000 f912 	bl	818d8 <_malloc_r>
   816b4:	4683      	mov	fp, r0
   816b6:	2800      	cmp	r0, #0
   816b8:	d055      	beq.n	81766 <__sfvwrite_r+0x2e2>
   816ba:	4652      	mov	r2, sl
   816bc:	6921      	ldr	r1, [r4, #16]
   816be:	f000 fbf3 	bl	81ea8 <memcpy>
   816c2:	89a3      	ldrh	r3, [r4, #12]
   816c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   816c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   816cc:	81a3      	strh	r3, [r4, #12]
   816ce:	eb0b 000a 	add.w	r0, fp, sl
   816d2:	eba8 030a 	sub.w	r3, r8, sl
   816d6:	f8c4 b010 	str.w	fp, [r4, #16]
   816da:	f8c4 8014 	str.w	r8, [r4, #20]
   816de:	6020      	str	r0, [r4, #0]
   816e0:	60a3      	str	r3, [r4, #8]
   816e2:	46b8      	mov	r8, r7
   816e4:	46ba      	mov	sl, r7
   816e6:	46bb      	mov	fp, r7
   816e8:	e71f      	b.n	8152a <__sfvwrite_r+0xa6>
   816ea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   816ee:	42ba      	cmp	r2, r7
   816f0:	bf28      	it	cs
   816f2:	463a      	movcs	r2, r7
   816f4:	fb92 f2f3 	sdiv	r2, r2, r3
   816f8:	69e1      	ldr	r1, [r4, #28]
   816fa:	fb03 f302 	mul.w	r3, r3, r2
   816fe:	9800      	ldr	r0, [sp, #0]
   81700:	464a      	mov	r2, r9
   81702:	6a66      	ldr	r6, [r4, #36]	; 0x24
   81704:	47b0      	blx	r6
   81706:	f1b0 0a00 	subs.w	sl, r0, #0
   8170a:	f73f af19 	bgt.w	81540 <__sfvwrite_r+0xbc>
   8170e:	e735      	b.n	8157c <__sfvwrite_r+0xf8>
   81710:	461a      	mov	r2, r3
   81712:	4629      	mov	r1, r5
   81714:	9301      	str	r3, [sp, #4]
   81716:	f000 fc3d 	bl	81f94 <memmove>
   8171a:	6822      	ldr	r2, [r4, #0]
   8171c:	9b01      	ldr	r3, [sp, #4]
   8171e:	4621      	mov	r1, r4
   81720:	441a      	add	r2, r3
   81722:	6022      	str	r2, [r4, #0]
   81724:	9800      	ldr	r0, [sp, #0]
   81726:	f7ff fcc9 	bl	810bc <_fflush_r>
   8172a:	9b01      	ldr	r3, [sp, #4]
   8172c:	2800      	cmp	r0, #0
   8172e:	f47f af25 	bne.w	8157c <__sfvwrite_r+0xf8>
   81732:	461f      	mov	r7, r3
   81734:	e74e      	b.n	815d4 <__sfvwrite_r+0x150>
   81736:	9800      	ldr	r0, [sp, #0]
   81738:	f000 fc9c 	bl	82074 <_realloc_r>
   8173c:	4683      	mov	fp, r0
   8173e:	2800      	cmp	r0, #0
   81740:	d1c5      	bne.n	816ce <__sfvwrite_r+0x24a>
   81742:	9d00      	ldr	r5, [sp, #0]
   81744:	6921      	ldr	r1, [r4, #16]
   81746:	4628      	mov	r0, r5
   81748:	f7ff fdb6 	bl	812b8 <_free_r>
   8174c:	220c      	movs	r2, #12
   8174e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81752:	602a      	str	r2, [r5, #0]
   81754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   81758:	e712      	b.n	81580 <__sfvwrite_r+0xfc>
   8175a:	f106 0901 	add.w	r9, r6, #1
   8175e:	e720      	b.n	815a2 <__sfvwrite_r+0x11e>
   81760:	f04f 30ff 	mov.w	r0, #4294967295
   81764:	e6bd      	b.n	814e2 <__sfvwrite_r+0x5e>
   81766:	220c      	movs	r2, #12
   81768:	9900      	ldr	r1, [sp, #0]
   8176a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8176e:	600a      	str	r2, [r1, #0]
   81770:	e706      	b.n	81580 <__sfvwrite_r+0xfc>
   81772:	bf00      	nop
   81774:	7ffffc00 	.word	0x7ffffc00

00081778 <_fwalk_reent>:
   81778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8177c:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   81780:	d01e      	beq.n	817c0 <_fwalk_reent+0x48>
   81782:	4688      	mov	r8, r1
   81784:	4607      	mov	r7, r0
   81786:	f04f 0900 	mov.w	r9, #0
   8178a:	6875      	ldr	r5, [r6, #4]
   8178c:	68b4      	ldr	r4, [r6, #8]
   8178e:	3d01      	subs	r5, #1
   81790:	d410      	bmi.n	817b4 <_fwalk_reent+0x3c>
   81792:	89a3      	ldrh	r3, [r4, #12]
   81794:	3d01      	subs	r5, #1
   81796:	2b01      	cmp	r3, #1
   81798:	d908      	bls.n	817ac <_fwalk_reent+0x34>
   8179a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8179e:	3301      	adds	r3, #1
   817a0:	d004      	beq.n	817ac <_fwalk_reent+0x34>
   817a2:	4621      	mov	r1, r4
   817a4:	4638      	mov	r0, r7
   817a6:	47c0      	blx	r8
   817a8:	ea49 0900 	orr.w	r9, r9, r0
   817ac:	1c6b      	adds	r3, r5, #1
   817ae:	f104 0468 	add.w	r4, r4, #104	; 0x68
   817b2:	d1ee      	bne.n	81792 <_fwalk_reent+0x1a>
   817b4:	6836      	ldr	r6, [r6, #0]
   817b6:	2e00      	cmp	r6, #0
   817b8:	d1e7      	bne.n	8178a <_fwalk_reent+0x12>
   817ba:	4648      	mov	r0, r9
   817bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   817c0:	46b1      	mov	r9, r6
   817c2:	4648      	mov	r0, r9
   817c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000817c8 <__retarget_lock_init_recursive>:
   817c8:	4770      	bx	lr
   817ca:	bf00      	nop

000817cc <__retarget_lock_close_recursive>:
   817cc:	4770      	bx	lr
   817ce:	bf00      	nop

000817d0 <__retarget_lock_acquire_recursive>:
   817d0:	4770      	bx	lr
   817d2:	bf00      	nop

000817d4 <__retarget_lock_release_recursive>:
   817d4:	4770      	bx	lr
   817d6:	bf00      	nop

000817d8 <__swhatbuf_r>:
   817d8:	b570      	push	{r4, r5, r6, lr}
   817da:	460c      	mov	r4, r1
   817dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   817e0:	b090      	sub	sp, #64	; 0x40
   817e2:	2900      	cmp	r1, #0
   817e4:	4615      	mov	r5, r2
   817e6:	461e      	mov	r6, r3
   817e8:	db14      	blt.n	81814 <__swhatbuf_r+0x3c>
   817ea:	aa01      	add	r2, sp, #4
   817ec:	f000 ff3a 	bl	82664 <_fstat_r>
   817f0:	2800      	cmp	r0, #0
   817f2:	db0f      	blt.n	81814 <__swhatbuf_r+0x3c>
   817f4:	9a02      	ldr	r2, [sp, #8]
   817f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   817fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   817fe:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   81802:	fab2 f282 	clz	r2, r2
   81806:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8180a:	0952      	lsrs	r2, r2, #5
   8180c:	6032      	str	r2, [r6, #0]
   8180e:	602b      	str	r3, [r5, #0]
   81810:	b010      	add	sp, #64	; 0x40
   81812:	bd70      	pop	{r4, r5, r6, pc}
   81814:	2300      	movs	r3, #0
   81816:	89a2      	ldrh	r2, [r4, #12]
   81818:	6033      	str	r3, [r6, #0]
   8181a:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   8181e:	d004      	beq.n	8182a <__swhatbuf_r+0x52>
   81820:	2240      	movs	r2, #64	; 0x40
   81822:	4618      	mov	r0, r3
   81824:	602a      	str	r2, [r5, #0]
   81826:	b010      	add	sp, #64	; 0x40
   81828:	bd70      	pop	{r4, r5, r6, pc}
   8182a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8182e:	602b      	str	r3, [r5, #0]
   81830:	b010      	add	sp, #64	; 0x40
   81832:	bd70      	pop	{r4, r5, r6, pc}

00081834 <__smakebuf_r>:
   81834:	898a      	ldrh	r2, [r1, #12]
   81836:	460b      	mov	r3, r1
   81838:	0792      	lsls	r2, r2, #30
   8183a:	d506      	bpl.n	8184a <__smakebuf_r+0x16>
   8183c:	2101      	movs	r1, #1
   8183e:	f103 0243 	add.w	r2, r3, #67	; 0x43
   81842:	6159      	str	r1, [r3, #20]
   81844:	601a      	str	r2, [r3, #0]
   81846:	611a      	str	r2, [r3, #16]
   81848:	4770      	bx	lr
   8184a:	b5f0      	push	{r4, r5, r6, r7, lr}
   8184c:	b083      	sub	sp, #12
   8184e:	ab01      	add	r3, sp, #4
   81850:	466a      	mov	r2, sp
   81852:	460c      	mov	r4, r1
   81854:	4606      	mov	r6, r0
   81856:	f7ff ffbf 	bl	817d8 <__swhatbuf_r>
   8185a:	9900      	ldr	r1, [sp, #0]
   8185c:	4605      	mov	r5, r0
   8185e:	4630      	mov	r0, r6
   81860:	f000 f83a 	bl	818d8 <_malloc_r>
   81864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81868:	b1d8      	cbz	r0, 818a2 <__smakebuf_r+0x6e>
   8186a:	e89d 0006 	ldmia.w	sp, {r1, r2}
   8186e:	4f15      	ldr	r7, [pc, #84]	; (818c4 <__smakebuf_r+0x90>)
   81870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81874:	63f7      	str	r7, [r6, #60]	; 0x3c
   81876:	81a3      	strh	r3, [r4, #12]
   81878:	6020      	str	r0, [r4, #0]
   8187a:	6120      	str	r0, [r4, #16]
   8187c:	6161      	str	r1, [r4, #20]
   8187e:	b91a      	cbnz	r2, 81888 <__smakebuf_r+0x54>
   81880:	432b      	orrs	r3, r5
   81882:	81a3      	strh	r3, [r4, #12]
   81884:	b003      	add	sp, #12
   81886:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81888:	4630      	mov	r0, r6
   8188a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8188e:	f000 fefd 	bl	8268c <_isatty_r>
   81892:	b1a0      	cbz	r0, 818be <__smakebuf_r+0x8a>
   81894:	89a3      	ldrh	r3, [r4, #12]
   81896:	f023 0303 	bic.w	r3, r3, #3
   8189a:	f043 0301 	orr.w	r3, r3, #1
   8189e:	b21b      	sxth	r3, r3
   818a0:	e7ee      	b.n	81880 <__smakebuf_r+0x4c>
   818a2:	059a      	lsls	r2, r3, #22
   818a4:	d4ee      	bmi.n	81884 <__smakebuf_r+0x50>
   818a6:	2101      	movs	r1, #1
   818a8:	f023 0303 	bic.w	r3, r3, #3
   818ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
   818b0:	f043 0302 	orr.w	r3, r3, #2
   818b4:	81a3      	strh	r3, [r4, #12]
   818b6:	6161      	str	r1, [r4, #20]
   818b8:	6022      	str	r2, [r4, #0]
   818ba:	6122      	str	r2, [r4, #16]
   818bc:	e7e2      	b.n	81884 <__smakebuf_r+0x50>
   818be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   818c2:	e7dd      	b.n	81880 <__smakebuf_r+0x4c>
   818c4:	00081111 	.word	0x00081111

000818c8 <malloc>:
   818c8:	4b02      	ldr	r3, [pc, #8]	; (818d4 <malloc+0xc>)
   818ca:	4601      	mov	r1, r0
   818cc:	6818      	ldr	r0, [r3, #0]
   818ce:	f000 b803 	b.w	818d8 <_malloc_r>
   818d2:	bf00      	nop
   818d4:	20070130 	.word	0x20070130

000818d8 <_malloc_r>:
   818d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   818dc:	f101 060b 	add.w	r6, r1, #11
   818e0:	2e16      	cmp	r6, #22
   818e2:	b083      	sub	sp, #12
   818e4:	4605      	mov	r5, r0
   818e6:	f240 809e 	bls.w	81a26 <_malloc_r+0x14e>
   818ea:	f036 0607 	bics.w	r6, r6, #7
   818ee:	f100 80bd 	bmi.w	81a6c <_malloc_r+0x194>
   818f2:	42b1      	cmp	r1, r6
   818f4:	f200 80ba 	bhi.w	81a6c <_malloc_r+0x194>
   818f8:	f000 fbb0 	bl	8205c <__malloc_lock>
   818fc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   81900:	f0c0 8285 	bcc.w	81e0e <_malloc_r+0x536>
   81904:	0a73      	lsrs	r3, r6, #9
   81906:	f000 80b8 	beq.w	81a7a <_malloc_r+0x1a2>
   8190a:	2b04      	cmp	r3, #4
   8190c:	f200 816c 	bhi.w	81be8 <_malloc_r+0x310>
   81910:	09b3      	lsrs	r3, r6, #6
   81912:	f103 0039 	add.w	r0, r3, #57	; 0x39
   81916:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   8191a:	00c1      	lsls	r1, r0, #3
   8191c:	4fb8      	ldr	r7, [pc, #736]	; (81c00 <_malloc_r+0x328>)
   8191e:	4439      	add	r1, r7
   81920:	684c      	ldr	r4, [r1, #4]
   81922:	3908      	subs	r1, #8
   81924:	42a1      	cmp	r1, r4
   81926:	d106      	bne.n	81936 <_malloc_r+0x5e>
   81928:	e00c      	b.n	81944 <_malloc_r+0x6c>
   8192a:	2a00      	cmp	r2, #0
   8192c:	f280 80ab 	bge.w	81a86 <_malloc_r+0x1ae>
   81930:	68e4      	ldr	r4, [r4, #12]
   81932:	42a1      	cmp	r1, r4
   81934:	d006      	beq.n	81944 <_malloc_r+0x6c>
   81936:	6863      	ldr	r3, [r4, #4]
   81938:	f023 0303 	bic.w	r3, r3, #3
   8193c:	1b9a      	subs	r2, r3, r6
   8193e:	2a0f      	cmp	r2, #15
   81940:	ddf3      	ble.n	8192a <_malloc_r+0x52>
   81942:	4670      	mov	r0, lr
   81944:	693c      	ldr	r4, [r7, #16]
   81946:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 81c14 <_malloc_r+0x33c>
   8194a:	4574      	cmp	r4, lr
   8194c:	f000 819e 	beq.w	81c8c <_malloc_r+0x3b4>
   81950:	6863      	ldr	r3, [r4, #4]
   81952:	f023 0303 	bic.w	r3, r3, #3
   81956:	1b9a      	subs	r2, r3, r6
   81958:	2a0f      	cmp	r2, #15
   8195a:	f300 8183 	bgt.w	81c64 <_malloc_r+0x38c>
   8195e:	2a00      	cmp	r2, #0
   81960:	f8c7 e014 	str.w	lr, [r7, #20]
   81964:	f8c7 e010 	str.w	lr, [r7, #16]
   81968:	f280 8091 	bge.w	81a8e <_malloc_r+0x1b6>
   8196c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   81970:	f080 8154 	bcs.w	81c1c <_malloc_r+0x344>
   81974:	2201      	movs	r2, #1
   81976:	08db      	lsrs	r3, r3, #3
   81978:	6879      	ldr	r1, [r7, #4]
   8197a:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   8197e:	4413      	add	r3, r2
   81980:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   81984:	fa02 f20c 	lsl.w	r2, r2, ip
   81988:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   8198c:	430a      	orrs	r2, r1
   8198e:	f1ac 0108 	sub.w	r1, ip, #8
   81992:	60e1      	str	r1, [r4, #12]
   81994:	f8c4 8008 	str.w	r8, [r4, #8]
   81998:	607a      	str	r2, [r7, #4]
   8199a:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   8199e:	f8c8 400c 	str.w	r4, [r8, #12]
   819a2:	2401      	movs	r4, #1
   819a4:	1083      	asrs	r3, r0, #2
   819a6:	409c      	lsls	r4, r3
   819a8:	4294      	cmp	r4, r2
   819aa:	d87d      	bhi.n	81aa8 <_malloc_r+0x1d0>
   819ac:	4214      	tst	r4, r2
   819ae:	d106      	bne.n	819be <_malloc_r+0xe6>
   819b0:	f020 0003 	bic.w	r0, r0, #3
   819b4:	0064      	lsls	r4, r4, #1
   819b6:	4214      	tst	r4, r2
   819b8:	f100 0004 	add.w	r0, r0, #4
   819bc:	d0fa      	beq.n	819b4 <_malloc_r+0xdc>
   819be:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   819c2:	46cc      	mov	ip, r9
   819c4:	4680      	mov	r8, r0
   819c6:	f8dc 300c 	ldr.w	r3, [ip, #12]
   819ca:	459c      	cmp	ip, r3
   819cc:	d107      	bne.n	819de <_malloc_r+0x106>
   819ce:	e15f      	b.n	81c90 <_malloc_r+0x3b8>
   819d0:	2a00      	cmp	r2, #0
   819d2:	f280 816d 	bge.w	81cb0 <_malloc_r+0x3d8>
   819d6:	68db      	ldr	r3, [r3, #12]
   819d8:	459c      	cmp	ip, r3
   819da:	f000 8159 	beq.w	81c90 <_malloc_r+0x3b8>
   819de:	6859      	ldr	r1, [r3, #4]
   819e0:	f021 0103 	bic.w	r1, r1, #3
   819e4:	1b8a      	subs	r2, r1, r6
   819e6:	2a0f      	cmp	r2, #15
   819e8:	ddf2      	ble.n	819d0 <_malloc_r+0xf8>
   819ea:	68dc      	ldr	r4, [r3, #12]
   819ec:	f8d3 c008 	ldr.w	ip, [r3, #8]
   819f0:	f046 0801 	orr.w	r8, r6, #1
   819f4:	4628      	mov	r0, r5
   819f6:	441e      	add	r6, r3
   819f8:	f042 0501 	orr.w	r5, r2, #1
   819fc:	f8c3 8004 	str.w	r8, [r3, #4]
   81a00:	f8cc 400c 	str.w	r4, [ip, #12]
   81a04:	f8c4 c008 	str.w	ip, [r4, #8]
   81a08:	617e      	str	r6, [r7, #20]
   81a0a:	613e      	str	r6, [r7, #16]
   81a0c:	f8c6 e00c 	str.w	lr, [r6, #12]
   81a10:	f8c6 e008 	str.w	lr, [r6, #8]
   81a14:	6075      	str	r5, [r6, #4]
   81a16:	505a      	str	r2, [r3, r1]
   81a18:	9300      	str	r3, [sp, #0]
   81a1a:	f000 fb25 	bl	82068 <__malloc_unlock>
   81a1e:	9b00      	ldr	r3, [sp, #0]
   81a20:	f103 0408 	add.w	r4, r3, #8
   81a24:	e01e      	b.n	81a64 <_malloc_r+0x18c>
   81a26:	2910      	cmp	r1, #16
   81a28:	d820      	bhi.n	81a6c <_malloc_r+0x194>
   81a2a:	f000 fb17 	bl	8205c <__malloc_lock>
   81a2e:	2610      	movs	r6, #16
   81a30:	2318      	movs	r3, #24
   81a32:	2002      	movs	r0, #2
   81a34:	4f72      	ldr	r7, [pc, #456]	; (81c00 <_malloc_r+0x328>)
   81a36:	443b      	add	r3, r7
   81a38:	685c      	ldr	r4, [r3, #4]
   81a3a:	f1a3 0208 	sub.w	r2, r3, #8
   81a3e:	4294      	cmp	r4, r2
   81a40:	f000 812f 	beq.w	81ca2 <_malloc_r+0x3ca>
   81a44:	6863      	ldr	r3, [r4, #4]
   81a46:	68e1      	ldr	r1, [r4, #12]
   81a48:	f023 0303 	bic.w	r3, r3, #3
   81a4c:	4423      	add	r3, r4
   81a4e:	685a      	ldr	r2, [r3, #4]
   81a50:	68a6      	ldr	r6, [r4, #8]
   81a52:	f042 0201 	orr.w	r2, r2, #1
   81a56:	60f1      	str	r1, [r6, #12]
   81a58:	4628      	mov	r0, r5
   81a5a:	608e      	str	r6, [r1, #8]
   81a5c:	605a      	str	r2, [r3, #4]
   81a5e:	f000 fb03 	bl	82068 <__malloc_unlock>
   81a62:	3408      	adds	r4, #8
   81a64:	4620      	mov	r0, r4
   81a66:	b003      	add	sp, #12
   81a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81a6c:	2400      	movs	r4, #0
   81a6e:	230c      	movs	r3, #12
   81a70:	4620      	mov	r0, r4
   81a72:	602b      	str	r3, [r5, #0]
   81a74:	b003      	add	sp, #12
   81a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81a7a:	2040      	movs	r0, #64	; 0x40
   81a7c:	f44f 7100 	mov.w	r1, #512	; 0x200
   81a80:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   81a84:	e74a      	b.n	8191c <_malloc_r+0x44>
   81a86:	4423      	add	r3, r4
   81a88:	685a      	ldr	r2, [r3, #4]
   81a8a:	68e1      	ldr	r1, [r4, #12]
   81a8c:	e7e0      	b.n	81a50 <_malloc_r+0x178>
   81a8e:	4423      	add	r3, r4
   81a90:	685a      	ldr	r2, [r3, #4]
   81a92:	4628      	mov	r0, r5
   81a94:	f042 0201 	orr.w	r2, r2, #1
   81a98:	605a      	str	r2, [r3, #4]
   81a9a:	3408      	adds	r4, #8
   81a9c:	f000 fae4 	bl	82068 <__malloc_unlock>
   81aa0:	4620      	mov	r0, r4
   81aa2:	b003      	add	sp, #12
   81aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81aa8:	68bc      	ldr	r4, [r7, #8]
   81aaa:	6863      	ldr	r3, [r4, #4]
   81aac:	f023 0803 	bic.w	r8, r3, #3
   81ab0:	45b0      	cmp	r8, r6
   81ab2:	d304      	bcc.n	81abe <_malloc_r+0x1e6>
   81ab4:	eba8 0306 	sub.w	r3, r8, r6
   81ab8:	2b0f      	cmp	r3, #15
   81aba:	f300 8085 	bgt.w	81bc8 <_malloc_r+0x2f0>
   81abe:	f8df 9158 	ldr.w	r9, [pc, #344]	; 81c18 <_malloc_r+0x340>
   81ac2:	4b50      	ldr	r3, [pc, #320]	; (81c04 <_malloc_r+0x32c>)
   81ac4:	f8d9 2000 	ldr.w	r2, [r9]
   81ac8:	681b      	ldr	r3, [r3, #0]
   81aca:	3201      	adds	r2, #1
   81acc:	4433      	add	r3, r6
   81ace:	eb04 0a08 	add.w	sl, r4, r8
   81ad2:	f000 8154 	beq.w	81d7e <_malloc_r+0x4a6>
   81ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   81ada:	330f      	adds	r3, #15
   81adc:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   81ae0:	f02b 0b0f 	bic.w	fp, fp, #15
   81ae4:	4659      	mov	r1, fp
   81ae6:	4628      	mov	r0, r5
   81ae8:	f000 fc7a 	bl	823e0 <_sbrk_r>
   81aec:	1c41      	adds	r1, r0, #1
   81aee:	4602      	mov	r2, r0
   81af0:	f000 80fb 	beq.w	81cea <_malloc_r+0x412>
   81af4:	4582      	cmp	sl, r0
   81af6:	f200 80f6 	bhi.w	81ce6 <_malloc_r+0x40e>
   81afa:	4b43      	ldr	r3, [pc, #268]	; (81c08 <_malloc_r+0x330>)
   81afc:	6819      	ldr	r1, [r3, #0]
   81afe:	4459      	add	r1, fp
   81b00:	6019      	str	r1, [r3, #0]
   81b02:	f000 814c 	beq.w	81d9e <_malloc_r+0x4c6>
   81b06:	f8d9 0000 	ldr.w	r0, [r9]
   81b0a:	3001      	adds	r0, #1
   81b0c:	bf1b      	ittet	ne
   81b0e:	eba2 0a0a 	subne.w	sl, r2, sl
   81b12:	4451      	addne	r1, sl
   81b14:	f8c9 2000 	streq.w	r2, [r9]
   81b18:	6019      	strne	r1, [r3, #0]
   81b1a:	f012 0107 	ands.w	r1, r2, #7
   81b1e:	f000 8114 	beq.w	81d4a <_malloc_r+0x472>
   81b22:	f1c1 0008 	rsb	r0, r1, #8
   81b26:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   81b2a:	4402      	add	r2, r0
   81b2c:	3108      	adds	r1, #8
   81b2e:	eb02 090b 	add.w	r9, r2, fp
   81b32:	f3c9 090b 	ubfx	r9, r9, #0, #12
   81b36:	eba1 0909 	sub.w	r9, r1, r9
   81b3a:	4649      	mov	r1, r9
   81b3c:	4628      	mov	r0, r5
   81b3e:	9301      	str	r3, [sp, #4]
   81b40:	9200      	str	r2, [sp, #0]
   81b42:	f000 fc4d 	bl	823e0 <_sbrk_r>
   81b46:	1c43      	adds	r3, r0, #1
   81b48:	e89d 000c 	ldmia.w	sp, {r2, r3}
   81b4c:	f000 8142 	beq.w	81dd4 <_malloc_r+0x4fc>
   81b50:	1a80      	subs	r0, r0, r2
   81b52:	4448      	add	r0, r9
   81b54:	f040 0001 	orr.w	r0, r0, #1
   81b58:	6819      	ldr	r1, [r3, #0]
   81b5a:	42bc      	cmp	r4, r7
   81b5c:	4449      	add	r1, r9
   81b5e:	60ba      	str	r2, [r7, #8]
   81b60:	6019      	str	r1, [r3, #0]
   81b62:	6050      	str	r0, [r2, #4]
   81b64:	d017      	beq.n	81b96 <_malloc_r+0x2be>
   81b66:	f1b8 0f0f 	cmp.w	r8, #15
   81b6a:	f240 80fa 	bls.w	81d62 <_malloc_r+0x48a>
   81b6e:	f04f 0c05 	mov.w	ip, #5
   81b72:	6862      	ldr	r2, [r4, #4]
   81b74:	f1a8 000c 	sub.w	r0, r8, #12
   81b78:	f020 0007 	bic.w	r0, r0, #7
   81b7c:	f002 0201 	and.w	r2, r2, #1
   81b80:	eb04 0e00 	add.w	lr, r4, r0
   81b84:	4302      	orrs	r2, r0
   81b86:	280f      	cmp	r0, #15
   81b88:	6062      	str	r2, [r4, #4]
   81b8a:	f8ce c004 	str.w	ip, [lr, #4]
   81b8e:	f8ce c008 	str.w	ip, [lr, #8]
   81b92:	f200 8116 	bhi.w	81dc2 <_malloc_r+0x4ea>
   81b96:	4b1d      	ldr	r3, [pc, #116]	; (81c0c <_malloc_r+0x334>)
   81b98:	68bc      	ldr	r4, [r7, #8]
   81b9a:	681a      	ldr	r2, [r3, #0]
   81b9c:	4291      	cmp	r1, r2
   81b9e:	bf88      	it	hi
   81ba0:	6019      	strhi	r1, [r3, #0]
   81ba2:	4b1b      	ldr	r3, [pc, #108]	; (81c10 <_malloc_r+0x338>)
   81ba4:	681a      	ldr	r2, [r3, #0]
   81ba6:	4291      	cmp	r1, r2
   81ba8:	6862      	ldr	r2, [r4, #4]
   81baa:	bf88      	it	hi
   81bac:	6019      	strhi	r1, [r3, #0]
   81bae:	f022 0203 	bic.w	r2, r2, #3
   81bb2:	4296      	cmp	r6, r2
   81bb4:	eba2 0306 	sub.w	r3, r2, r6
   81bb8:	d801      	bhi.n	81bbe <_malloc_r+0x2e6>
   81bba:	2b0f      	cmp	r3, #15
   81bbc:	dc04      	bgt.n	81bc8 <_malloc_r+0x2f0>
   81bbe:	4628      	mov	r0, r5
   81bc0:	f000 fa52 	bl	82068 <__malloc_unlock>
   81bc4:	2400      	movs	r4, #0
   81bc6:	e74d      	b.n	81a64 <_malloc_r+0x18c>
   81bc8:	f046 0201 	orr.w	r2, r6, #1
   81bcc:	f043 0301 	orr.w	r3, r3, #1
   81bd0:	4426      	add	r6, r4
   81bd2:	6062      	str	r2, [r4, #4]
   81bd4:	4628      	mov	r0, r5
   81bd6:	60be      	str	r6, [r7, #8]
   81bd8:	3408      	adds	r4, #8
   81bda:	6073      	str	r3, [r6, #4]
   81bdc:	f000 fa44 	bl	82068 <__malloc_unlock>
   81be0:	4620      	mov	r0, r4
   81be2:	b003      	add	sp, #12
   81be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81be8:	2b14      	cmp	r3, #20
   81bea:	d970      	bls.n	81cce <_malloc_r+0x3f6>
   81bec:	2b54      	cmp	r3, #84	; 0x54
   81bee:	f200 80a2 	bhi.w	81d36 <_malloc_r+0x45e>
   81bf2:	0b33      	lsrs	r3, r6, #12
   81bf4:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   81bf8:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   81bfc:	00c1      	lsls	r1, r0, #3
   81bfe:	e68d      	b.n	8191c <_malloc_r+0x44>
   81c00:	20070564 	.word	0x20070564
   81c04:	20070a38 	.word	0x20070a38
   81c08:	20070a08 	.word	0x20070a08
   81c0c:	20070a30 	.word	0x20070a30
   81c10:	20070a34 	.word	0x20070a34
   81c14:	2007056c 	.word	0x2007056c
   81c18:	2007096c 	.word	0x2007096c
   81c1c:	0a5a      	lsrs	r2, r3, #9
   81c1e:	2a04      	cmp	r2, #4
   81c20:	d95b      	bls.n	81cda <_malloc_r+0x402>
   81c22:	2a14      	cmp	r2, #20
   81c24:	f200 80ae 	bhi.w	81d84 <_malloc_r+0x4ac>
   81c28:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   81c2c:	00c9      	lsls	r1, r1, #3
   81c2e:	325b      	adds	r2, #91	; 0x5b
   81c30:	eb07 0c01 	add.w	ip, r7, r1
   81c34:	5879      	ldr	r1, [r7, r1]
   81c36:	f1ac 0c08 	sub.w	ip, ip, #8
   81c3a:	458c      	cmp	ip, r1
   81c3c:	f000 8088 	beq.w	81d50 <_malloc_r+0x478>
   81c40:	684a      	ldr	r2, [r1, #4]
   81c42:	f022 0203 	bic.w	r2, r2, #3
   81c46:	4293      	cmp	r3, r2
   81c48:	d273      	bcs.n	81d32 <_malloc_r+0x45a>
   81c4a:	6889      	ldr	r1, [r1, #8]
   81c4c:	458c      	cmp	ip, r1
   81c4e:	d1f7      	bne.n	81c40 <_malloc_r+0x368>
   81c50:	f8dc 300c 	ldr.w	r3, [ip, #12]
   81c54:	687a      	ldr	r2, [r7, #4]
   81c56:	60e3      	str	r3, [r4, #12]
   81c58:	f8c4 c008 	str.w	ip, [r4, #8]
   81c5c:	609c      	str	r4, [r3, #8]
   81c5e:	f8cc 400c 	str.w	r4, [ip, #12]
   81c62:	e69e      	b.n	819a2 <_malloc_r+0xca>
   81c64:	f046 0c01 	orr.w	ip, r6, #1
   81c68:	f042 0101 	orr.w	r1, r2, #1
   81c6c:	4426      	add	r6, r4
   81c6e:	f8c4 c004 	str.w	ip, [r4, #4]
   81c72:	4628      	mov	r0, r5
   81c74:	617e      	str	r6, [r7, #20]
   81c76:	613e      	str	r6, [r7, #16]
   81c78:	f8c6 e00c 	str.w	lr, [r6, #12]
   81c7c:	f8c6 e008 	str.w	lr, [r6, #8]
   81c80:	6071      	str	r1, [r6, #4]
   81c82:	50e2      	str	r2, [r4, r3]
   81c84:	f000 f9f0 	bl	82068 <__malloc_unlock>
   81c88:	3408      	adds	r4, #8
   81c8a:	e6eb      	b.n	81a64 <_malloc_r+0x18c>
   81c8c:	687a      	ldr	r2, [r7, #4]
   81c8e:	e688      	b.n	819a2 <_malloc_r+0xca>
   81c90:	f108 0801 	add.w	r8, r8, #1
   81c94:	f018 0f03 	tst.w	r8, #3
   81c98:	f10c 0c08 	add.w	ip, ip, #8
   81c9c:	f47f ae93 	bne.w	819c6 <_malloc_r+0xee>
   81ca0:	e02d      	b.n	81cfe <_malloc_r+0x426>
   81ca2:	68dc      	ldr	r4, [r3, #12]
   81ca4:	42a3      	cmp	r3, r4
   81ca6:	bf08      	it	eq
   81ca8:	3002      	addeq	r0, #2
   81caa:	f43f ae4b 	beq.w	81944 <_malloc_r+0x6c>
   81cae:	e6c9      	b.n	81a44 <_malloc_r+0x16c>
   81cb0:	461c      	mov	r4, r3
   81cb2:	4419      	add	r1, r3
   81cb4:	684a      	ldr	r2, [r1, #4]
   81cb6:	68db      	ldr	r3, [r3, #12]
   81cb8:	f854 6f08 	ldr.w	r6, [r4, #8]!
   81cbc:	f042 0201 	orr.w	r2, r2, #1
   81cc0:	604a      	str	r2, [r1, #4]
   81cc2:	4628      	mov	r0, r5
   81cc4:	60f3      	str	r3, [r6, #12]
   81cc6:	609e      	str	r6, [r3, #8]
   81cc8:	f000 f9ce 	bl	82068 <__malloc_unlock>
   81ccc:	e6ca      	b.n	81a64 <_malloc_r+0x18c>
   81cce:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   81cd2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   81cd6:	00c1      	lsls	r1, r0, #3
   81cd8:	e620      	b.n	8191c <_malloc_r+0x44>
   81cda:	099a      	lsrs	r2, r3, #6
   81cdc:	f102 0139 	add.w	r1, r2, #57	; 0x39
   81ce0:	00c9      	lsls	r1, r1, #3
   81ce2:	3238      	adds	r2, #56	; 0x38
   81ce4:	e7a4      	b.n	81c30 <_malloc_r+0x358>
   81ce6:	42bc      	cmp	r4, r7
   81ce8:	d054      	beq.n	81d94 <_malloc_r+0x4bc>
   81cea:	68bc      	ldr	r4, [r7, #8]
   81cec:	6862      	ldr	r2, [r4, #4]
   81cee:	f022 0203 	bic.w	r2, r2, #3
   81cf2:	e75e      	b.n	81bb2 <_malloc_r+0x2da>
   81cf4:	f859 3908 	ldr.w	r3, [r9], #-8
   81cf8:	4599      	cmp	r9, r3
   81cfa:	f040 8086 	bne.w	81e0a <_malloc_r+0x532>
   81cfe:	f010 0f03 	tst.w	r0, #3
   81d02:	f100 30ff 	add.w	r0, r0, #4294967295
   81d06:	d1f5      	bne.n	81cf4 <_malloc_r+0x41c>
   81d08:	687b      	ldr	r3, [r7, #4]
   81d0a:	ea23 0304 	bic.w	r3, r3, r4
   81d0e:	607b      	str	r3, [r7, #4]
   81d10:	0064      	lsls	r4, r4, #1
   81d12:	429c      	cmp	r4, r3
   81d14:	f63f aec8 	bhi.w	81aa8 <_malloc_r+0x1d0>
   81d18:	2c00      	cmp	r4, #0
   81d1a:	f43f aec5 	beq.w	81aa8 <_malloc_r+0x1d0>
   81d1e:	421c      	tst	r4, r3
   81d20:	4640      	mov	r0, r8
   81d22:	f47f ae4c 	bne.w	819be <_malloc_r+0xe6>
   81d26:	0064      	lsls	r4, r4, #1
   81d28:	421c      	tst	r4, r3
   81d2a:	f100 0004 	add.w	r0, r0, #4
   81d2e:	d0fa      	beq.n	81d26 <_malloc_r+0x44e>
   81d30:	e645      	b.n	819be <_malloc_r+0xe6>
   81d32:	468c      	mov	ip, r1
   81d34:	e78c      	b.n	81c50 <_malloc_r+0x378>
   81d36:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   81d3a:	d815      	bhi.n	81d68 <_malloc_r+0x490>
   81d3c:	0bf3      	lsrs	r3, r6, #15
   81d3e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   81d42:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   81d46:	00c1      	lsls	r1, r0, #3
   81d48:	e5e8      	b.n	8191c <_malloc_r+0x44>
   81d4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81d4e:	e6ee      	b.n	81b2e <_malloc_r+0x256>
   81d50:	2101      	movs	r1, #1
   81d52:	687b      	ldr	r3, [r7, #4]
   81d54:	1092      	asrs	r2, r2, #2
   81d56:	fa01 f202 	lsl.w	r2, r1, r2
   81d5a:	431a      	orrs	r2, r3
   81d5c:	607a      	str	r2, [r7, #4]
   81d5e:	4663      	mov	r3, ip
   81d60:	e779      	b.n	81c56 <_malloc_r+0x37e>
   81d62:	2301      	movs	r3, #1
   81d64:	6053      	str	r3, [r2, #4]
   81d66:	e72a      	b.n	81bbe <_malloc_r+0x2e6>
   81d68:	f240 5254 	movw	r2, #1364	; 0x554
   81d6c:	4293      	cmp	r3, r2
   81d6e:	d822      	bhi.n	81db6 <_malloc_r+0x4de>
   81d70:	0cb3      	lsrs	r3, r6, #18
   81d72:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   81d76:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   81d7a:	00c1      	lsls	r1, r0, #3
   81d7c:	e5ce      	b.n	8191c <_malloc_r+0x44>
   81d7e:	f103 0b10 	add.w	fp, r3, #16
   81d82:	e6af      	b.n	81ae4 <_malloc_r+0x20c>
   81d84:	2a54      	cmp	r2, #84	; 0x54
   81d86:	d829      	bhi.n	81ddc <_malloc_r+0x504>
   81d88:	0b1a      	lsrs	r2, r3, #12
   81d8a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   81d8e:	00c9      	lsls	r1, r1, #3
   81d90:	326e      	adds	r2, #110	; 0x6e
   81d92:	e74d      	b.n	81c30 <_malloc_r+0x358>
   81d94:	4b20      	ldr	r3, [pc, #128]	; (81e18 <_malloc_r+0x540>)
   81d96:	6819      	ldr	r1, [r3, #0]
   81d98:	4459      	add	r1, fp
   81d9a:	6019      	str	r1, [r3, #0]
   81d9c:	e6b3      	b.n	81b06 <_malloc_r+0x22e>
   81d9e:	f3ca 000b 	ubfx	r0, sl, #0, #12
   81da2:	2800      	cmp	r0, #0
   81da4:	f47f aeaf 	bne.w	81b06 <_malloc_r+0x22e>
   81da8:	eb08 030b 	add.w	r3, r8, fp
   81dac:	68ba      	ldr	r2, [r7, #8]
   81dae:	f043 0301 	orr.w	r3, r3, #1
   81db2:	6053      	str	r3, [r2, #4]
   81db4:	e6ef      	b.n	81b96 <_malloc_r+0x2be>
   81db6:	207f      	movs	r0, #127	; 0x7f
   81db8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   81dbc:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   81dc0:	e5ac      	b.n	8191c <_malloc_r+0x44>
   81dc2:	f104 0108 	add.w	r1, r4, #8
   81dc6:	4628      	mov	r0, r5
   81dc8:	9300      	str	r3, [sp, #0]
   81dca:	f7ff fa75 	bl	812b8 <_free_r>
   81dce:	9b00      	ldr	r3, [sp, #0]
   81dd0:	6819      	ldr	r1, [r3, #0]
   81dd2:	e6e0      	b.n	81b96 <_malloc_r+0x2be>
   81dd4:	2001      	movs	r0, #1
   81dd6:	f04f 0900 	mov.w	r9, #0
   81dda:	e6bd      	b.n	81b58 <_malloc_r+0x280>
   81ddc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   81de0:	d805      	bhi.n	81dee <_malloc_r+0x516>
   81de2:	0bda      	lsrs	r2, r3, #15
   81de4:	f102 0178 	add.w	r1, r2, #120	; 0x78
   81de8:	00c9      	lsls	r1, r1, #3
   81dea:	3277      	adds	r2, #119	; 0x77
   81dec:	e720      	b.n	81c30 <_malloc_r+0x358>
   81dee:	f240 5154 	movw	r1, #1364	; 0x554
   81df2:	428a      	cmp	r2, r1
   81df4:	d805      	bhi.n	81e02 <_malloc_r+0x52a>
   81df6:	0c9a      	lsrs	r2, r3, #18
   81df8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   81dfc:	00c9      	lsls	r1, r1, #3
   81dfe:	327c      	adds	r2, #124	; 0x7c
   81e00:	e716      	b.n	81c30 <_malloc_r+0x358>
   81e02:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   81e06:	227e      	movs	r2, #126	; 0x7e
   81e08:	e712      	b.n	81c30 <_malloc_r+0x358>
   81e0a:	687b      	ldr	r3, [r7, #4]
   81e0c:	e780      	b.n	81d10 <_malloc_r+0x438>
   81e0e:	08f0      	lsrs	r0, r6, #3
   81e10:	f106 0308 	add.w	r3, r6, #8
   81e14:	e60e      	b.n	81a34 <_malloc_r+0x15c>
   81e16:	bf00      	nop
   81e18:	20070a08 	.word	0x20070a08

00081e1c <memchr>:
   81e1c:	0783      	lsls	r3, r0, #30
   81e1e:	b470      	push	{r4, r5, r6}
   81e20:	b2cd      	uxtb	r5, r1
   81e22:	d03d      	beq.n	81ea0 <memchr+0x84>
   81e24:	1e54      	subs	r4, r2, #1
   81e26:	b30a      	cbz	r2, 81e6c <memchr+0x50>
   81e28:	7803      	ldrb	r3, [r0, #0]
   81e2a:	42ab      	cmp	r3, r5
   81e2c:	d01f      	beq.n	81e6e <memchr+0x52>
   81e2e:	1c43      	adds	r3, r0, #1
   81e30:	e005      	b.n	81e3e <memchr+0x22>
   81e32:	f114 34ff 	adds.w	r4, r4, #4294967295
   81e36:	d319      	bcc.n	81e6c <memchr+0x50>
   81e38:	7802      	ldrb	r2, [r0, #0]
   81e3a:	42aa      	cmp	r2, r5
   81e3c:	d017      	beq.n	81e6e <memchr+0x52>
   81e3e:	f013 0f03 	tst.w	r3, #3
   81e42:	4618      	mov	r0, r3
   81e44:	f103 0301 	add.w	r3, r3, #1
   81e48:	d1f3      	bne.n	81e32 <memchr+0x16>
   81e4a:	2c03      	cmp	r4, #3
   81e4c:	d811      	bhi.n	81e72 <memchr+0x56>
   81e4e:	b34c      	cbz	r4, 81ea4 <memchr+0x88>
   81e50:	7803      	ldrb	r3, [r0, #0]
   81e52:	42ab      	cmp	r3, r5
   81e54:	d00b      	beq.n	81e6e <memchr+0x52>
   81e56:	4404      	add	r4, r0
   81e58:	1c43      	adds	r3, r0, #1
   81e5a:	e002      	b.n	81e62 <memchr+0x46>
   81e5c:	7802      	ldrb	r2, [r0, #0]
   81e5e:	42aa      	cmp	r2, r5
   81e60:	d005      	beq.n	81e6e <memchr+0x52>
   81e62:	429c      	cmp	r4, r3
   81e64:	4618      	mov	r0, r3
   81e66:	f103 0301 	add.w	r3, r3, #1
   81e6a:	d1f7      	bne.n	81e5c <memchr+0x40>
   81e6c:	2000      	movs	r0, #0
   81e6e:	bc70      	pop	{r4, r5, r6}
   81e70:	4770      	bx	lr
   81e72:	0209      	lsls	r1, r1, #8
   81e74:	b289      	uxth	r1, r1
   81e76:	4329      	orrs	r1, r5
   81e78:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   81e7c:	6803      	ldr	r3, [r0, #0]
   81e7e:	4606      	mov	r6, r0
   81e80:	404b      	eors	r3, r1
   81e82:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   81e86:	ea22 0303 	bic.w	r3, r2, r3
   81e8a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   81e8e:	f100 0004 	add.w	r0, r0, #4
   81e92:	d103      	bne.n	81e9c <memchr+0x80>
   81e94:	3c04      	subs	r4, #4
   81e96:	2c03      	cmp	r4, #3
   81e98:	d8f0      	bhi.n	81e7c <memchr+0x60>
   81e9a:	e7d8      	b.n	81e4e <memchr+0x32>
   81e9c:	4630      	mov	r0, r6
   81e9e:	e7d7      	b.n	81e50 <memchr+0x34>
   81ea0:	4614      	mov	r4, r2
   81ea2:	e7d2      	b.n	81e4a <memchr+0x2e>
   81ea4:	4620      	mov	r0, r4
   81ea6:	e7e2      	b.n	81e6e <memchr+0x52>

00081ea8 <memcpy>:
   81ea8:	4684      	mov	ip, r0
   81eaa:	ea41 0300 	orr.w	r3, r1, r0
   81eae:	f013 0303 	ands.w	r3, r3, #3
   81eb2:	d149      	bne.n	81f48 <memcpy+0xa0>
   81eb4:	3a40      	subs	r2, #64	; 0x40
   81eb6:	d323      	bcc.n	81f00 <memcpy+0x58>
   81eb8:	680b      	ldr	r3, [r1, #0]
   81eba:	6003      	str	r3, [r0, #0]
   81ebc:	684b      	ldr	r3, [r1, #4]
   81ebe:	6043      	str	r3, [r0, #4]
   81ec0:	688b      	ldr	r3, [r1, #8]
   81ec2:	6083      	str	r3, [r0, #8]
   81ec4:	68cb      	ldr	r3, [r1, #12]
   81ec6:	60c3      	str	r3, [r0, #12]
   81ec8:	690b      	ldr	r3, [r1, #16]
   81eca:	6103      	str	r3, [r0, #16]
   81ecc:	694b      	ldr	r3, [r1, #20]
   81ece:	6143      	str	r3, [r0, #20]
   81ed0:	698b      	ldr	r3, [r1, #24]
   81ed2:	6183      	str	r3, [r0, #24]
   81ed4:	69cb      	ldr	r3, [r1, #28]
   81ed6:	61c3      	str	r3, [r0, #28]
   81ed8:	6a0b      	ldr	r3, [r1, #32]
   81eda:	6203      	str	r3, [r0, #32]
   81edc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   81ede:	6243      	str	r3, [r0, #36]	; 0x24
   81ee0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   81ee2:	6283      	str	r3, [r0, #40]	; 0x28
   81ee4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   81ee6:	62c3      	str	r3, [r0, #44]	; 0x2c
   81ee8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81eea:	6303      	str	r3, [r0, #48]	; 0x30
   81eec:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   81eee:	6343      	str	r3, [r0, #52]	; 0x34
   81ef0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   81ef2:	6383      	str	r3, [r0, #56]	; 0x38
   81ef4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   81ef6:	63c3      	str	r3, [r0, #60]	; 0x3c
   81ef8:	3040      	adds	r0, #64	; 0x40
   81efa:	3140      	adds	r1, #64	; 0x40
   81efc:	3a40      	subs	r2, #64	; 0x40
   81efe:	d2db      	bcs.n	81eb8 <memcpy+0x10>
   81f00:	3230      	adds	r2, #48	; 0x30
   81f02:	d30b      	bcc.n	81f1c <memcpy+0x74>
   81f04:	680b      	ldr	r3, [r1, #0]
   81f06:	6003      	str	r3, [r0, #0]
   81f08:	684b      	ldr	r3, [r1, #4]
   81f0a:	6043      	str	r3, [r0, #4]
   81f0c:	688b      	ldr	r3, [r1, #8]
   81f0e:	6083      	str	r3, [r0, #8]
   81f10:	68cb      	ldr	r3, [r1, #12]
   81f12:	60c3      	str	r3, [r0, #12]
   81f14:	3010      	adds	r0, #16
   81f16:	3110      	adds	r1, #16
   81f18:	3a10      	subs	r2, #16
   81f1a:	d2f3      	bcs.n	81f04 <memcpy+0x5c>
   81f1c:	320c      	adds	r2, #12
   81f1e:	d305      	bcc.n	81f2c <memcpy+0x84>
   81f20:	f851 3b04 	ldr.w	r3, [r1], #4
   81f24:	f840 3b04 	str.w	r3, [r0], #4
   81f28:	3a04      	subs	r2, #4
   81f2a:	d2f9      	bcs.n	81f20 <memcpy+0x78>
   81f2c:	3204      	adds	r2, #4
   81f2e:	d008      	beq.n	81f42 <memcpy+0x9a>
   81f30:	07d2      	lsls	r2, r2, #31
   81f32:	bf1c      	itt	ne
   81f34:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81f38:	f800 3b01 	strbne.w	r3, [r0], #1
   81f3c:	d301      	bcc.n	81f42 <memcpy+0x9a>
   81f3e:	880b      	ldrh	r3, [r1, #0]
   81f40:	8003      	strh	r3, [r0, #0]
   81f42:	4660      	mov	r0, ip
   81f44:	4770      	bx	lr
   81f46:	bf00      	nop
   81f48:	2a08      	cmp	r2, #8
   81f4a:	d313      	bcc.n	81f74 <memcpy+0xcc>
   81f4c:	078b      	lsls	r3, r1, #30
   81f4e:	d0b1      	beq.n	81eb4 <memcpy+0xc>
   81f50:	f010 0303 	ands.w	r3, r0, #3
   81f54:	d0ae      	beq.n	81eb4 <memcpy+0xc>
   81f56:	f1c3 0304 	rsb	r3, r3, #4
   81f5a:	1ad2      	subs	r2, r2, r3
   81f5c:	07db      	lsls	r3, r3, #31
   81f5e:	bf1c      	itt	ne
   81f60:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81f64:	f800 3b01 	strbne.w	r3, [r0], #1
   81f68:	d3a4      	bcc.n	81eb4 <memcpy+0xc>
   81f6a:	f831 3b02 	ldrh.w	r3, [r1], #2
   81f6e:	f820 3b02 	strh.w	r3, [r0], #2
   81f72:	e79f      	b.n	81eb4 <memcpy+0xc>
   81f74:	3a04      	subs	r2, #4
   81f76:	d3d9      	bcc.n	81f2c <memcpy+0x84>
   81f78:	3a01      	subs	r2, #1
   81f7a:	f811 3b01 	ldrb.w	r3, [r1], #1
   81f7e:	f800 3b01 	strb.w	r3, [r0], #1
   81f82:	d2f9      	bcs.n	81f78 <memcpy+0xd0>
   81f84:	780b      	ldrb	r3, [r1, #0]
   81f86:	7003      	strb	r3, [r0, #0]
   81f88:	784b      	ldrb	r3, [r1, #1]
   81f8a:	7043      	strb	r3, [r0, #1]
   81f8c:	788b      	ldrb	r3, [r1, #2]
   81f8e:	7083      	strb	r3, [r0, #2]
   81f90:	4660      	mov	r0, ip
   81f92:	4770      	bx	lr

00081f94 <memmove>:
   81f94:	4288      	cmp	r0, r1
   81f96:	b5f0      	push	{r4, r5, r6, r7, lr}
   81f98:	d90d      	bls.n	81fb6 <memmove+0x22>
   81f9a:	188b      	adds	r3, r1, r2
   81f9c:	4298      	cmp	r0, r3
   81f9e:	d20a      	bcs.n	81fb6 <memmove+0x22>
   81fa0:	1884      	adds	r4, r0, r2
   81fa2:	2a00      	cmp	r2, #0
   81fa4:	d051      	beq.n	8204a <memmove+0xb6>
   81fa6:	4622      	mov	r2, r4
   81fa8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   81fac:	4299      	cmp	r1, r3
   81fae:	f802 4d01 	strb.w	r4, [r2, #-1]!
   81fb2:	d1f9      	bne.n	81fa8 <memmove+0x14>
   81fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81fb6:	2a0f      	cmp	r2, #15
   81fb8:	d948      	bls.n	8204c <memmove+0xb8>
   81fba:	ea41 0300 	orr.w	r3, r1, r0
   81fbe:	079b      	lsls	r3, r3, #30
   81fc0:	d146      	bne.n	82050 <memmove+0xbc>
   81fc2:	4615      	mov	r5, r2
   81fc4:	f100 0410 	add.w	r4, r0, #16
   81fc8:	f101 0310 	add.w	r3, r1, #16
   81fcc:	f853 6c10 	ldr.w	r6, [r3, #-16]
   81fd0:	3d10      	subs	r5, #16
   81fd2:	f844 6c10 	str.w	r6, [r4, #-16]
   81fd6:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   81fda:	2d0f      	cmp	r5, #15
   81fdc:	f844 6c0c 	str.w	r6, [r4, #-12]
   81fe0:	f853 6c08 	ldr.w	r6, [r3, #-8]
   81fe4:	f104 0410 	add.w	r4, r4, #16
   81fe8:	f844 6c18 	str.w	r6, [r4, #-24]
   81fec:	f853 6c04 	ldr.w	r6, [r3, #-4]
   81ff0:	f103 0310 	add.w	r3, r3, #16
   81ff4:	f844 6c14 	str.w	r6, [r4, #-20]
   81ff8:	d8e8      	bhi.n	81fcc <memmove+0x38>
   81ffa:	f1a2 0310 	sub.w	r3, r2, #16
   81ffe:	f023 030f 	bic.w	r3, r3, #15
   82002:	f002 0e0f 	and.w	lr, r2, #15
   82006:	3310      	adds	r3, #16
   82008:	f1be 0f03 	cmp.w	lr, #3
   8200c:	4419      	add	r1, r3
   8200e:	4403      	add	r3, r0
   82010:	d921      	bls.n	82056 <memmove+0xc2>
   82012:	460e      	mov	r6, r1
   82014:	4674      	mov	r4, lr
   82016:	1f1d      	subs	r5, r3, #4
   82018:	f856 7b04 	ldr.w	r7, [r6], #4
   8201c:	3c04      	subs	r4, #4
   8201e:	2c03      	cmp	r4, #3
   82020:	f845 7f04 	str.w	r7, [r5, #4]!
   82024:	d8f8      	bhi.n	82018 <memmove+0x84>
   82026:	f1ae 0404 	sub.w	r4, lr, #4
   8202a:	f024 0403 	bic.w	r4, r4, #3
   8202e:	3404      	adds	r4, #4
   82030:	4421      	add	r1, r4
   82032:	4423      	add	r3, r4
   82034:	f002 0203 	and.w	r2, r2, #3
   82038:	b162      	cbz	r2, 82054 <memmove+0xc0>
   8203a:	3b01      	subs	r3, #1
   8203c:	440a      	add	r2, r1
   8203e:	f811 4b01 	ldrb.w	r4, [r1], #1
   82042:	428a      	cmp	r2, r1
   82044:	f803 4f01 	strb.w	r4, [r3, #1]!
   82048:	d1f9      	bne.n	8203e <memmove+0xaa>
   8204a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8204c:	4603      	mov	r3, r0
   8204e:	e7f3      	b.n	82038 <memmove+0xa4>
   82050:	4603      	mov	r3, r0
   82052:	e7f2      	b.n	8203a <memmove+0xa6>
   82054:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82056:	4672      	mov	r2, lr
   82058:	e7ee      	b.n	82038 <memmove+0xa4>
   8205a:	bf00      	nop

0008205c <__malloc_lock>:
   8205c:	4801      	ldr	r0, [pc, #4]	; (82064 <__malloc_lock+0x8>)
   8205e:	f7ff bbb7 	b.w	817d0 <__retarget_lock_acquire_recursive>
   82062:	bf00      	nop
   82064:	20070a58 	.word	0x20070a58

00082068 <__malloc_unlock>:
   82068:	4801      	ldr	r0, [pc, #4]	; (82070 <__malloc_unlock+0x8>)
   8206a:	f7ff bbb3 	b.w	817d4 <__retarget_lock_release_recursive>
   8206e:	bf00      	nop
   82070:	20070a58 	.word	0x20070a58

00082074 <_realloc_r>:
   82074:	2900      	cmp	r1, #0
   82076:	f000 8094 	beq.w	821a2 <_realloc_r+0x12e>
   8207a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8207e:	460c      	mov	r4, r1
   82080:	4615      	mov	r5, r2
   82082:	b083      	sub	sp, #12
   82084:	4680      	mov	r8, r0
   82086:	f105 060b 	add.w	r6, r5, #11
   8208a:	f7ff ffe7 	bl	8205c <__malloc_lock>
   8208e:	f854 ec04 	ldr.w	lr, [r4, #-4]
   82092:	2e16      	cmp	r6, #22
   82094:	f02e 0703 	bic.w	r7, lr, #3
   82098:	f1a4 0908 	sub.w	r9, r4, #8
   8209c:	d83c      	bhi.n	82118 <_realloc_r+0xa4>
   8209e:	2210      	movs	r2, #16
   820a0:	4616      	mov	r6, r2
   820a2:	42b5      	cmp	r5, r6
   820a4:	d83d      	bhi.n	82122 <_realloc_r+0xae>
   820a6:	4297      	cmp	r7, r2
   820a8:	da43      	bge.n	82132 <_realloc_r+0xbe>
   820aa:	4bc6      	ldr	r3, [pc, #792]	; (823c4 <_realloc_r+0x350>)
   820ac:	eb09 0007 	add.w	r0, r9, r7
   820b0:	6899      	ldr	r1, [r3, #8]
   820b2:	4288      	cmp	r0, r1
   820b4:	f000 80c3 	beq.w	8223e <_realloc_r+0x1ca>
   820b8:	6843      	ldr	r3, [r0, #4]
   820ba:	f023 0101 	bic.w	r1, r3, #1
   820be:	4401      	add	r1, r0
   820c0:	6849      	ldr	r1, [r1, #4]
   820c2:	07c9      	lsls	r1, r1, #31
   820c4:	d54d      	bpl.n	82162 <_realloc_r+0xee>
   820c6:	f01e 0f01 	tst.w	lr, #1
   820ca:	f000 809b 	beq.w	82204 <_realloc_r+0x190>
   820ce:	4629      	mov	r1, r5
   820d0:	4640      	mov	r0, r8
   820d2:	f7ff fc01 	bl	818d8 <_malloc_r>
   820d6:	4605      	mov	r5, r0
   820d8:	2800      	cmp	r0, #0
   820da:	d03b      	beq.n	82154 <_realloc_r+0xe0>
   820dc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   820e0:	f1a0 0208 	sub.w	r2, r0, #8
   820e4:	f023 0301 	bic.w	r3, r3, #1
   820e8:	444b      	add	r3, r9
   820ea:	429a      	cmp	r2, r3
   820ec:	f000 812b 	beq.w	82346 <_realloc_r+0x2d2>
   820f0:	1f3a      	subs	r2, r7, #4
   820f2:	2a24      	cmp	r2, #36	; 0x24
   820f4:	f200 8118 	bhi.w	82328 <_realloc_r+0x2b4>
   820f8:	2a13      	cmp	r2, #19
   820fa:	f200 80eb 	bhi.w	822d4 <_realloc_r+0x260>
   820fe:	4603      	mov	r3, r0
   82100:	4622      	mov	r2, r4
   82102:	6811      	ldr	r1, [r2, #0]
   82104:	6019      	str	r1, [r3, #0]
   82106:	6851      	ldr	r1, [r2, #4]
   82108:	6059      	str	r1, [r3, #4]
   8210a:	6892      	ldr	r2, [r2, #8]
   8210c:	609a      	str	r2, [r3, #8]
   8210e:	4621      	mov	r1, r4
   82110:	4640      	mov	r0, r8
   82112:	f7ff f8d1 	bl	812b8 <_free_r>
   82116:	e01d      	b.n	82154 <_realloc_r+0xe0>
   82118:	f026 0607 	bic.w	r6, r6, #7
   8211c:	2e00      	cmp	r6, #0
   8211e:	4632      	mov	r2, r6
   82120:	dabf      	bge.n	820a2 <_realloc_r+0x2e>
   82122:	2500      	movs	r5, #0
   82124:	230c      	movs	r3, #12
   82126:	4628      	mov	r0, r5
   82128:	f8c8 3000 	str.w	r3, [r8]
   8212c:	b003      	add	sp, #12
   8212e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82132:	4625      	mov	r5, r4
   82134:	1bbb      	subs	r3, r7, r6
   82136:	2b0f      	cmp	r3, #15
   82138:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8213c:	d81d      	bhi.n	8217a <_realloc_r+0x106>
   8213e:	f002 0201 	and.w	r2, r2, #1
   82142:	433a      	orrs	r2, r7
   82144:	eb09 0107 	add.w	r1, r9, r7
   82148:	f8c9 2004 	str.w	r2, [r9, #4]
   8214c:	684b      	ldr	r3, [r1, #4]
   8214e:	f043 0301 	orr.w	r3, r3, #1
   82152:	604b      	str	r3, [r1, #4]
   82154:	4640      	mov	r0, r8
   82156:	f7ff ff87 	bl	82068 <__malloc_unlock>
   8215a:	4628      	mov	r0, r5
   8215c:	b003      	add	sp, #12
   8215e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82162:	f023 0303 	bic.w	r3, r3, #3
   82166:	18f9      	adds	r1, r7, r3
   82168:	4291      	cmp	r1, r2
   8216a:	db1d      	blt.n	821a8 <_realloc_r+0x134>
   8216c:	68c3      	ldr	r3, [r0, #12]
   8216e:	6882      	ldr	r2, [r0, #8]
   82170:	4625      	mov	r5, r4
   82172:	60d3      	str	r3, [r2, #12]
   82174:	460f      	mov	r7, r1
   82176:	609a      	str	r2, [r3, #8]
   82178:	e7dc      	b.n	82134 <_realloc_r+0xc0>
   8217a:	f002 0201 	and.w	r2, r2, #1
   8217e:	eb09 0106 	add.w	r1, r9, r6
   82182:	f043 0301 	orr.w	r3, r3, #1
   82186:	4332      	orrs	r2, r6
   82188:	f8c9 2004 	str.w	r2, [r9, #4]
   8218c:	444f      	add	r7, r9
   8218e:	604b      	str	r3, [r1, #4]
   82190:	687b      	ldr	r3, [r7, #4]
   82192:	3108      	adds	r1, #8
   82194:	f043 0301 	orr.w	r3, r3, #1
   82198:	607b      	str	r3, [r7, #4]
   8219a:	4640      	mov	r0, r8
   8219c:	f7ff f88c 	bl	812b8 <_free_r>
   821a0:	e7d8      	b.n	82154 <_realloc_r+0xe0>
   821a2:	4611      	mov	r1, r2
   821a4:	f7ff bb98 	b.w	818d8 <_malloc_r>
   821a8:	f01e 0f01 	tst.w	lr, #1
   821ac:	d18f      	bne.n	820ce <_realloc_r+0x5a>
   821ae:	f854 1c08 	ldr.w	r1, [r4, #-8]
   821b2:	eba9 0a01 	sub.w	sl, r9, r1
   821b6:	f8da 1004 	ldr.w	r1, [sl, #4]
   821ba:	f021 0103 	bic.w	r1, r1, #3
   821be:	440b      	add	r3, r1
   821c0:	443b      	add	r3, r7
   821c2:	4293      	cmp	r3, r2
   821c4:	db26      	blt.n	82214 <_realloc_r+0x1a0>
   821c6:	4655      	mov	r5, sl
   821c8:	68c1      	ldr	r1, [r0, #12]
   821ca:	6880      	ldr	r0, [r0, #8]
   821cc:	1f3a      	subs	r2, r7, #4
   821ce:	60c1      	str	r1, [r0, #12]
   821d0:	6088      	str	r0, [r1, #8]
   821d2:	f855 0f08 	ldr.w	r0, [r5, #8]!
   821d6:	f8da 100c 	ldr.w	r1, [sl, #12]
   821da:	2a24      	cmp	r2, #36	; 0x24
   821dc:	60c1      	str	r1, [r0, #12]
   821de:	6088      	str	r0, [r1, #8]
   821e0:	d826      	bhi.n	82230 <_realloc_r+0x1bc>
   821e2:	2a13      	cmp	r2, #19
   821e4:	f240 8081 	bls.w	822ea <_realloc_r+0x276>
   821e8:	6821      	ldr	r1, [r4, #0]
   821ea:	2a1b      	cmp	r2, #27
   821ec:	f8ca 1008 	str.w	r1, [sl, #8]
   821f0:	6861      	ldr	r1, [r4, #4]
   821f2:	f8ca 100c 	str.w	r1, [sl, #12]
   821f6:	f200 80ad 	bhi.w	82354 <_realloc_r+0x2e0>
   821fa:	f104 0008 	add.w	r0, r4, #8
   821fe:	f10a 0210 	add.w	r2, sl, #16
   82202:	e074      	b.n	822ee <_realloc_r+0x27a>
   82204:	f854 3c08 	ldr.w	r3, [r4, #-8]
   82208:	eba9 0a03 	sub.w	sl, r9, r3
   8220c:	f8da 1004 	ldr.w	r1, [sl, #4]
   82210:	f021 0103 	bic.w	r1, r1, #3
   82214:	187b      	adds	r3, r7, r1
   82216:	4293      	cmp	r3, r2
   82218:	f6ff af59 	blt.w	820ce <_realloc_r+0x5a>
   8221c:	4655      	mov	r5, sl
   8221e:	f8da 100c 	ldr.w	r1, [sl, #12]
   82222:	f855 0f08 	ldr.w	r0, [r5, #8]!
   82226:	1f3a      	subs	r2, r7, #4
   82228:	2a24      	cmp	r2, #36	; 0x24
   8222a:	60c1      	str	r1, [r0, #12]
   8222c:	6088      	str	r0, [r1, #8]
   8222e:	d9d8      	bls.n	821e2 <_realloc_r+0x16e>
   82230:	4621      	mov	r1, r4
   82232:	4628      	mov	r0, r5
   82234:	461f      	mov	r7, r3
   82236:	46d1      	mov	r9, sl
   82238:	f7ff feac 	bl	81f94 <memmove>
   8223c:	e77a      	b.n	82134 <_realloc_r+0xc0>
   8223e:	6841      	ldr	r1, [r0, #4]
   82240:	f106 0010 	add.w	r0, r6, #16
   82244:	f021 0b03 	bic.w	fp, r1, #3
   82248:	44bb      	add	fp, r7
   8224a:	4583      	cmp	fp, r0
   8224c:	da58      	bge.n	82300 <_realloc_r+0x28c>
   8224e:	f01e 0f01 	tst.w	lr, #1
   82252:	f47f af3c 	bne.w	820ce <_realloc_r+0x5a>
   82256:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8225a:	eba9 0a01 	sub.w	sl, r9, r1
   8225e:	f8da 1004 	ldr.w	r1, [sl, #4]
   82262:	f021 0103 	bic.w	r1, r1, #3
   82266:	448b      	add	fp, r1
   82268:	4558      	cmp	r0, fp
   8226a:	dcd3      	bgt.n	82214 <_realloc_r+0x1a0>
   8226c:	4655      	mov	r5, sl
   8226e:	f8da 100c 	ldr.w	r1, [sl, #12]
   82272:	f855 0f08 	ldr.w	r0, [r5, #8]!
   82276:	1f3a      	subs	r2, r7, #4
   82278:	2a24      	cmp	r2, #36	; 0x24
   8227a:	60c1      	str	r1, [r0, #12]
   8227c:	6088      	str	r0, [r1, #8]
   8227e:	f200 808d 	bhi.w	8239c <_realloc_r+0x328>
   82282:	2a13      	cmp	r2, #19
   82284:	f240 8087 	bls.w	82396 <_realloc_r+0x322>
   82288:	6821      	ldr	r1, [r4, #0]
   8228a:	2a1b      	cmp	r2, #27
   8228c:	f8ca 1008 	str.w	r1, [sl, #8]
   82290:	6861      	ldr	r1, [r4, #4]
   82292:	f8ca 100c 	str.w	r1, [sl, #12]
   82296:	f200 8088 	bhi.w	823aa <_realloc_r+0x336>
   8229a:	f104 0108 	add.w	r1, r4, #8
   8229e:	f10a 0210 	add.w	r2, sl, #16
   822a2:	6808      	ldr	r0, [r1, #0]
   822a4:	6010      	str	r0, [r2, #0]
   822a6:	6848      	ldr	r0, [r1, #4]
   822a8:	6050      	str	r0, [r2, #4]
   822aa:	6889      	ldr	r1, [r1, #8]
   822ac:	6091      	str	r1, [r2, #8]
   822ae:	ebab 0206 	sub.w	r2, fp, r6
   822b2:	eb0a 0106 	add.w	r1, sl, r6
   822b6:	f042 0201 	orr.w	r2, r2, #1
   822ba:	6099      	str	r1, [r3, #8]
   822bc:	604a      	str	r2, [r1, #4]
   822be:	f8da 3004 	ldr.w	r3, [sl, #4]
   822c2:	4640      	mov	r0, r8
   822c4:	f003 0301 	and.w	r3, r3, #1
   822c8:	431e      	orrs	r6, r3
   822ca:	f8ca 6004 	str.w	r6, [sl, #4]
   822ce:	f7ff fecb 	bl	82068 <__malloc_unlock>
   822d2:	e742      	b.n	8215a <_realloc_r+0xe6>
   822d4:	6823      	ldr	r3, [r4, #0]
   822d6:	2a1b      	cmp	r2, #27
   822d8:	6003      	str	r3, [r0, #0]
   822da:	6863      	ldr	r3, [r4, #4]
   822dc:	6043      	str	r3, [r0, #4]
   822de:	d827      	bhi.n	82330 <_realloc_r+0x2bc>
   822e0:	f100 0308 	add.w	r3, r0, #8
   822e4:	f104 0208 	add.w	r2, r4, #8
   822e8:	e70b      	b.n	82102 <_realloc_r+0x8e>
   822ea:	4620      	mov	r0, r4
   822ec:	462a      	mov	r2, r5
   822ee:	6801      	ldr	r1, [r0, #0]
   822f0:	461f      	mov	r7, r3
   822f2:	6011      	str	r1, [r2, #0]
   822f4:	6841      	ldr	r1, [r0, #4]
   822f6:	46d1      	mov	r9, sl
   822f8:	6051      	str	r1, [r2, #4]
   822fa:	6883      	ldr	r3, [r0, #8]
   822fc:	6093      	str	r3, [r2, #8]
   822fe:	e719      	b.n	82134 <_realloc_r+0xc0>
   82300:	ebab 0b06 	sub.w	fp, fp, r6
   82304:	eb09 0106 	add.w	r1, r9, r6
   82308:	f04b 0201 	orr.w	r2, fp, #1
   8230c:	6099      	str	r1, [r3, #8]
   8230e:	604a      	str	r2, [r1, #4]
   82310:	f854 3c04 	ldr.w	r3, [r4, #-4]
   82314:	4640      	mov	r0, r8
   82316:	f003 0301 	and.w	r3, r3, #1
   8231a:	431e      	orrs	r6, r3
   8231c:	f844 6c04 	str.w	r6, [r4, #-4]
   82320:	f7ff fea2 	bl	82068 <__malloc_unlock>
   82324:	4625      	mov	r5, r4
   82326:	e718      	b.n	8215a <_realloc_r+0xe6>
   82328:	4621      	mov	r1, r4
   8232a:	f7ff fe33 	bl	81f94 <memmove>
   8232e:	e6ee      	b.n	8210e <_realloc_r+0x9a>
   82330:	68a3      	ldr	r3, [r4, #8]
   82332:	2a24      	cmp	r2, #36	; 0x24
   82334:	6083      	str	r3, [r0, #8]
   82336:	68e3      	ldr	r3, [r4, #12]
   82338:	60c3      	str	r3, [r0, #12]
   8233a:	d018      	beq.n	8236e <_realloc_r+0x2fa>
   8233c:	f100 0310 	add.w	r3, r0, #16
   82340:	f104 0210 	add.w	r2, r4, #16
   82344:	e6dd      	b.n	82102 <_realloc_r+0x8e>
   82346:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8234a:	4625      	mov	r5, r4
   8234c:	f023 0303 	bic.w	r3, r3, #3
   82350:	441f      	add	r7, r3
   82352:	e6ef      	b.n	82134 <_realloc_r+0xc0>
   82354:	68a1      	ldr	r1, [r4, #8]
   82356:	2a24      	cmp	r2, #36	; 0x24
   82358:	f8ca 1010 	str.w	r1, [sl, #16]
   8235c:	68e1      	ldr	r1, [r4, #12]
   8235e:	f8ca 1014 	str.w	r1, [sl, #20]
   82362:	d00d      	beq.n	82380 <_realloc_r+0x30c>
   82364:	f104 0010 	add.w	r0, r4, #16
   82368:	f10a 0218 	add.w	r2, sl, #24
   8236c:	e7bf      	b.n	822ee <_realloc_r+0x27a>
   8236e:	6922      	ldr	r2, [r4, #16]
   82370:	f100 0318 	add.w	r3, r0, #24
   82374:	6102      	str	r2, [r0, #16]
   82376:	6961      	ldr	r1, [r4, #20]
   82378:	f104 0218 	add.w	r2, r4, #24
   8237c:	6141      	str	r1, [r0, #20]
   8237e:	e6c0      	b.n	82102 <_realloc_r+0x8e>
   82380:	6922      	ldr	r2, [r4, #16]
   82382:	f104 0018 	add.w	r0, r4, #24
   82386:	f8ca 2018 	str.w	r2, [sl, #24]
   8238a:	6961      	ldr	r1, [r4, #20]
   8238c:	f10a 0220 	add.w	r2, sl, #32
   82390:	f8ca 101c 	str.w	r1, [sl, #28]
   82394:	e7ab      	b.n	822ee <_realloc_r+0x27a>
   82396:	4621      	mov	r1, r4
   82398:	462a      	mov	r2, r5
   8239a:	e782      	b.n	822a2 <_realloc_r+0x22e>
   8239c:	4621      	mov	r1, r4
   8239e:	4628      	mov	r0, r5
   823a0:	9301      	str	r3, [sp, #4]
   823a2:	f7ff fdf7 	bl	81f94 <memmove>
   823a6:	9b01      	ldr	r3, [sp, #4]
   823a8:	e781      	b.n	822ae <_realloc_r+0x23a>
   823aa:	68a1      	ldr	r1, [r4, #8]
   823ac:	2a24      	cmp	r2, #36	; 0x24
   823ae:	f8ca 1010 	str.w	r1, [sl, #16]
   823b2:	68e1      	ldr	r1, [r4, #12]
   823b4:	f8ca 1014 	str.w	r1, [sl, #20]
   823b8:	d006      	beq.n	823c8 <_realloc_r+0x354>
   823ba:	f104 0110 	add.w	r1, r4, #16
   823be:	f10a 0218 	add.w	r2, sl, #24
   823c2:	e76e      	b.n	822a2 <_realloc_r+0x22e>
   823c4:	20070564 	.word	0x20070564
   823c8:	6922      	ldr	r2, [r4, #16]
   823ca:	f104 0118 	add.w	r1, r4, #24
   823ce:	f8ca 2018 	str.w	r2, [sl, #24]
   823d2:	6960      	ldr	r0, [r4, #20]
   823d4:	f10a 0220 	add.w	r2, sl, #32
   823d8:	f8ca 001c 	str.w	r0, [sl, #28]
   823dc:	e761      	b.n	822a2 <_realloc_r+0x22e>
   823de:	bf00      	nop

000823e0 <_sbrk_r>:
   823e0:	b538      	push	{r3, r4, r5, lr}
   823e2:	2300      	movs	r3, #0
   823e4:	4c06      	ldr	r4, [pc, #24]	; (82400 <_sbrk_r+0x20>)
   823e6:	4605      	mov	r5, r0
   823e8:	4608      	mov	r0, r1
   823ea:	6023      	str	r3, [r4, #0]
   823ec:	f7fe fb64 	bl	80ab8 <_sbrk>
   823f0:	1c43      	adds	r3, r0, #1
   823f2:	d000      	beq.n	823f6 <_sbrk_r+0x16>
   823f4:	bd38      	pop	{r3, r4, r5, pc}
   823f6:	6823      	ldr	r3, [r4, #0]
   823f8:	2b00      	cmp	r3, #0
   823fa:	d0fb      	beq.n	823f4 <_sbrk_r+0x14>
   823fc:	602b      	str	r3, [r5, #0]
   823fe:	bd38      	pop	{r3, r4, r5, pc}
   82400:	20070a6c 	.word	0x20070a6c

00082404 <__sread>:
   82404:	b510      	push	{r4, lr}
   82406:	460c      	mov	r4, r1
   82408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8240c:	f000 f966 	bl	826dc <_read_r>
   82410:	2800      	cmp	r0, #0
   82412:	db03      	blt.n	8241c <__sread+0x18>
   82414:	6d23      	ldr	r3, [r4, #80]	; 0x50
   82416:	4403      	add	r3, r0
   82418:	6523      	str	r3, [r4, #80]	; 0x50
   8241a:	bd10      	pop	{r4, pc}
   8241c:	89a3      	ldrh	r3, [r4, #12]
   8241e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   82422:	81a3      	strh	r3, [r4, #12]
   82424:	bd10      	pop	{r4, pc}
   82426:	bf00      	nop

00082428 <__swrite>:
   82428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8242c:	460c      	mov	r4, r1
   8242e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   82432:	461f      	mov	r7, r3
   82434:	05cb      	lsls	r3, r1, #23
   82436:	4616      	mov	r6, r2
   82438:	4605      	mov	r5, r0
   8243a:	d507      	bpl.n	8244c <__swrite+0x24>
   8243c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82440:	2302      	movs	r3, #2
   82442:	2200      	movs	r2, #0
   82444:	f000 f934 	bl	826b0 <_lseek_r>
   82448:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8244c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   82450:	81a1      	strh	r1, [r4, #12]
   82452:	463b      	mov	r3, r7
   82454:	4632      	mov	r2, r6
   82456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8245a:	4628      	mov	r0, r5
   8245c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82460:	f000 b814 	b.w	8248c <_write_r>

00082464 <__sseek>:
   82464:	b510      	push	{r4, lr}
   82466:	460c      	mov	r4, r1
   82468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8246c:	f000 f920 	bl	826b0 <_lseek_r>
   82470:	89a3      	ldrh	r3, [r4, #12]
   82472:	1c42      	adds	r2, r0, #1
   82474:	bf0e      	itee	eq
   82476:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8247a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8247e:	6520      	strne	r0, [r4, #80]	; 0x50
   82480:	81a3      	strh	r3, [r4, #12]
   82482:	bd10      	pop	{r4, pc}

00082484 <__sclose>:
   82484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82488:	f000 b878 	b.w	8257c <_close_r>

0008248c <_write_r>:
   8248c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8248e:	460e      	mov	r6, r1
   82490:	2500      	movs	r5, #0
   82492:	4c08      	ldr	r4, [pc, #32]	; (824b4 <_write_r+0x28>)
   82494:	4611      	mov	r1, r2
   82496:	4607      	mov	r7, r0
   82498:	461a      	mov	r2, r3
   8249a:	4630      	mov	r0, r6
   8249c:	6025      	str	r5, [r4, #0]
   8249e:	f7fd ffa9 	bl	803f4 <_write>
   824a2:	1c43      	adds	r3, r0, #1
   824a4:	d000      	beq.n	824a8 <_write_r+0x1c>
   824a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   824a8:	6823      	ldr	r3, [r4, #0]
   824aa:	2b00      	cmp	r3, #0
   824ac:	d0fb      	beq.n	824a6 <_write_r+0x1a>
   824ae:	603b      	str	r3, [r7, #0]
   824b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   824b2:	bf00      	nop
   824b4:	20070a6c 	.word	0x20070a6c

000824b8 <__register_exitproc>:
   824b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   824bc:	4d2c      	ldr	r5, [pc, #176]	; (82570 <__register_exitproc+0xb8>)
   824be:	4606      	mov	r6, r0
   824c0:	6828      	ldr	r0, [r5, #0]
   824c2:	4698      	mov	r8, r3
   824c4:	460f      	mov	r7, r1
   824c6:	4691      	mov	r9, r2
   824c8:	f7ff f982 	bl	817d0 <__retarget_lock_acquire_recursive>
   824cc:	4b29      	ldr	r3, [pc, #164]	; (82574 <__register_exitproc+0xbc>)
   824ce:	681c      	ldr	r4, [r3, #0]
   824d0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   824d4:	2b00      	cmp	r3, #0
   824d6:	d03e      	beq.n	82556 <__register_exitproc+0x9e>
   824d8:	685a      	ldr	r2, [r3, #4]
   824da:	2a1f      	cmp	r2, #31
   824dc:	dc1c      	bgt.n	82518 <__register_exitproc+0x60>
   824de:	f102 0e01 	add.w	lr, r2, #1
   824e2:	b176      	cbz	r6, 82502 <__register_exitproc+0x4a>
   824e4:	2101      	movs	r1, #1
   824e6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   824ea:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   824ee:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   824f2:	4091      	lsls	r1, r2
   824f4:	4308      	orrs	r0, r1
   824f6:	2e02      	cmp	r6, #2
   824f8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   824fc:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   82500:	d023      	beq.n	8254a <__register_exitproc+0x92>
   82502:	3202      	adds	r2, #2
   82504:	f8c3 e004 	str.w	lr, [r3, #4]
   82508:	6828      	ldr	r0, [r5, #0]
   8250a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8250e:	f7ff f961 	bl	817d4 <__retarget_lock_release_recursive>
   82512:	2000      	movs	r0, #0
   82514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82518:	4b17      	ldr	r3, [pc, #92]	; (82578 <__register_exitproc+0xc0>)
   8251a:	b30b      	cbz	r3, 82560 <__register_exitproc+0xa8>
   8251c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   82520:	f7ff f9d2 	bl	818c8 <malloc>
   82524:	4603      	mov	r3, r0
   82526:	b1d8      	cbz	r0, 82560 <__register_exitproc+0xa8>
   82528:	2000      	movs	r0, #0
   8252a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8252e:	f04f 0e01 	mov.w	lr, #1
   82532:	6058      	str	r0, [r3, #4]
   82534:	6019      	str	r1, [r3, #0]
   82536:	4602      	mov	r2, r0
   82538:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8253c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   82540:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   82544:	2e00      	cmp	r6, #0
   82546:	d0dc      	beq.n	82502 <__register_exitproc+0x4a>
   82548:	e7cc      	b.n	824e4 <__register_exitproc+0x2c>
   8254a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8254e:	4301      	orrs	r1, r0
   82550:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   82554:	e7d5      	b.n	82502 <__register_exitproc+0x4a>
   82556:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8255a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8255e:	e7bb      	b.n	824d8 <__register_exitproc+0x20>
   82560:	6828      	ldr	r0, [r5, #0]
   82562:	f7ff f937 	bl	817d4 <__retarget_lock_release_recursive>
   82566:	f04f 30ff 	mov.w	r0, #4294967295
   8256a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8256e:	bf00      	nop
   82570:	20070560 	.word	0x20070560
   82574:	00082714 	.word	0x00082714
   82578:	000818c9 	.word	0x000818c9

0008257c <_close_r>:
   8257c:	b538      	push	{r3, r4, r5, lr}
   8257e:	2300      	movs	r3, #0
   82580:	4c06      	ldr	r4, [pc, #24]	; (8259c <_close_r+0x20>)
   82582:	4605      	mov	r5, r0
   82584:	4608      	mov	r0, r1
   82586:	6023      	str	r3, [r4, #0]
   82588:	f7fe fab2 	bl	80af0 <_close>
   8258c:	1c43      	adds	r3, r0, #1
   8258e:	d000      	beq.n	82592 <_close_r+0x16>
   82590:	bd38      	pop	{r3, r4, r5, pc}
   82592:	6823      	ldr	r3, [r4, #0]
   82594:	2b00      	cmp	r3, #0
   82596:	d0fb      	beq.n	82590 <_close_r+0x14>
   82598:	602b      	str	r3, [r5, #0]
   8259a:	bd38      	pop	{r3, r4, r5, pc}
   8259c:	20070a6c 	.word	0x20070a6c

000825a0 <_fclose_r>:
   825a0:	b570      	push	{r4, r5, r6, lr}
   825a2:	b159      	cbz	r1, 825bc <_fclose_r+0x1c>
   825a4:	4605      	mov	r5, r0
   825a6:	460c      	mov	r4, r1
   825a8:	b110      	cbz	r0, 825b0 <_fclose_r+0x10>
   825aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
   825ac:	2b00      	cmp	r3, #0
   825ae:	d03c      	beq.n	8262a <_fclose_r+0x8a>
   825b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   825b2:	07d8      	lsls	r0, r3, #31
   825b4:	d505      	bpl.n	825c2 <_fclose_r+0x22>
   825b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   825ba:	b92b      	cbnz	r3, 825c8 <_fclose_r+0x28>
   825bc:	2600      	movs	r6, #0
   825be:	4630      	mov	r0, r6
   825c0:	bd70      	pop	{r4, r5, r6, pc}
   825c2:	89a3      	ldrh	r3, [r4, #12]
   825c4:	0599      	lsls	r1, r3, #22
   825c6:	d53c      	bpl.n	82642 <_fclose_r+0xa2>
   825c8:	4621      	mov	r1, r4
   825ca:	4628      	mov	r0, r5
   825cc:	f7fe fcda 	bl	80f84 <__sflush_r>
   825d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   825d2:	4606      	mov	r6, r0
   825d4:	b133      	cbz	r3, 825e4 <_fclose_r+0x44>
   825d6:	69e1      	ldr	r1, [r4, #28]
   825d8:	4628      	mov	r0, r5
   825da:	4798      	blx	r3
   825dc:	2800      	cmp	r0, #0
   825de:	bfb8      	it	lt
   825e0:	f04f 36ff 	movlt.w	r6, #4294967295
   825e4:	89a3      	ldrh	r3, [r4, #12]
   825e6:	061a      	lsls	r2, r3, #24
   825e8:	d422      	bmi.n	82630 <_fclose_r+0x90>
   825ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
   825ec:	b141      	cbz	r1, 82600 <_fclose_r+0x60>
   825ee:	f104 0340 	add.w	r3, r4, #64	; 0x40
   825f2:	4299      	cmp	r1, r3
   825f4:	d002      	beq.n	825fc <_fclose_r+0x5c>
   825f6:	4628      	mov	r0, r5
   825f8:	f7fe fe5e 	bl	812b8 <_free_r>
   825fc:	2300      	movs	r3, #0
   825fe:	6323      	str	r3, [r4, #48]	; 0x30
   82600:	6c61      	ldr	r1, [r4, #68]	; 0x44
   82602:	b121      	cbz	r1, 8260e <_fclose_r+0x6e>
   82604:	4628      	mov	r0, r5
   82606:	f7fe fe57 	bl	812b8 <_free_r>
   8260a:	2300      	movs	r3, #0
   8260c:	6463      	str	r3, [r4, #68]	; 0x44
   8260e:	f7fe fddd 	bl	811cc <__sfp_lock_acquire>
   82612:	2200      	movs	r2, #0
   82614:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82616:	81a2      	strh	r2, [r4, #12]
   82618:	07db      	lsls	r3, r3, #31
   8261a:	d50e      	bpl.n	8263a <_fclose_r+0x9a>
   8261c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8261e:	f7ff f8d5 	bl	817cc <__retarget_lock_close_recursive>
   82622:	f7fe fdd9 	bl	811d8 <__sfp_lock_release>
   82626:	4630      	mov	r0, r6
   82628:	bd70      	pop	{r4, r5, r6, pc}
   8262a:	f7fe fd9f 	bl	8116c <__sinit>
   8262e:	e7bf      	b.n	825b0 <_fclose_r+0x10>
   82630:	6921      	ldr	r1, [r4, #16]
   82632:	4628      	mov	r0, r5
   82634:	f7fe fe40 	bl	812b8 <_free_r>
   82638:	e7d7      	b.n	825ea <_fclose_r+0x4a>
   8263a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8263c:	f7ff f8ca 	bl	817d4 <__retarget_lock_release_recursive>
   82640:	e7ec      	b.n	8261c <_fclose_r+0x7c>
   82642:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82644:	f7ff f8c4 	bl	817d0 <__retarget_lock_acquire_recursive>
   82648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8264c:	2b00      	cmp	r3, #0
   8264e:	d1bb      	bne.n	825c8 <_fclose_r+0x28>
   82650:	6e66      	ldr	r6, [r4, #100]	; 0x64
   82652:	f016 0601 	ands.w	r6, r6, #1
   82656:	d1b1      	bne.n	825bc <_fclose_r+0x1c>
   82658:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8265a:	f7ff f8bb 	bl	817d4 <__retarget_lock_release_recursive>
   8265e:	4630      	mov	r0, r6
   82660:	bd70      	pop	{r4, r5, r6, pc}
   82662:	bf00      	nop

00082664 <_fstat_r>:
   82664:	b570      	push	{r4, r5, r6, lr}
   82666:	460d      	mov	r5, r1
   82668:	2300      	movs	r3, #0
   8266a:	4c07      	ldr	r4, [pc, #28]	; (82688 <_fstat_r+0x24>)
   8266c:	4606      	mov	r6, r0
   8266e:	4611      	mov	r1, r2
   82670:	4628      	mov	r0, r5
   82672:	6023      	str	r3, [r4, #0]
   82674:	f7fe fa3f 	bl	80af6 <_fstat>
   82678:	1c43      	adds	r3, r0, #1
   8267a:	d000      	beq.n	8267e <_fstat_r+0x1a>
   8267c:	bd70      	pop	{r4, r5, r6, pc}
   8267e:	6823      	ldr	r3, [r4, #0]
   82680:	2b00      	cmp	r3, #0
   82682:	d0fb      	beq.n	8267c <_fstat_r+0x18>
   82684:	6033      	str	r3, [r6, #0]
   82686:	bd70      	pop	{r4, r5, r6, pc}
   82688:	20070a6c 	.word	0x20070a6c

0008268c <_isatty_r>:
   8268c:	b538      	push	{r3, r4, r5, lr}
   8268e:	2300      	movs	r3, #0
   82690:	4c06      	ldr	r4, [pc, #24]	; (826ac <_isatty_r+0x20>)
   82692:	4605      	mov	r5, r0
   82694:	4608      	mov	r0, r1
   82696:	6023      	str	r3, [r4, #0]
   82698:	f7fe fa32 	bl	80b00 <_isatty>
   8269c:	1c43      	adds	r3, r0, #1
   8269e:	d000      	beq.n	826a2 <_isatty_r+0x16>
   826a0:	bd38      	pop	{r3, r4, r5, pc}
   826a2:	6823      	ldr	r3, [r4, #0]
   826a4:	2b00      	cmp	r3, #0
   826a6:	d0fb      	beq.n	826a0 <_isatty_r+0x14>
   826a8:	602b      	str	r3, [r5, #0]
   826aa:	bd38      	pop	{r3, r4, r5, pc}
   826ac:	20070a6c 	.word	0x20070a6c

000826b0 <_lseek_r>:
   826b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   826b2:	460e      	mov	r6, r1
   826b4:	2500      	movs	r5, #0
   826b6:	4c08      	ldr	r4, [pc, #32]	; (826d8 <_lseek_r+0x28>)
   826b8:	4611      	mov	r1, r2
   826ba:	4607      	mov	r7, r0
   826bc:	461a      	mov	r2, r3
   826be:	4630      	mov	r0, r6
   826c0:	6025      	str	r5, [r4, #0]
   826c2:	f7fe fa1f 	bl	80b04 <_lseek>
   826c6:	1c43      	adds	r3, r0, #1
   826c8:	d000      	beq.n	826cc <_lseek_r+0x1c>
   826ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   826cc:	6823      	ldr	r3, [r4, #0]
   826ce:	2b00      	cmp	r3, #0
   826d0:	d0fb      	beq.n	826ca <_lseek_r+0x1a>
   826d2:	603b      	str	r3, [r7, #0]
   826d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   826d6:	bf00      	nop
   826d8:	20070a6c 	.word	0x20070a6c

000826dc <_read_r>:
   826dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   826de:	460e      	mov	r6, r1
   826e0:	2500      	movs	r5, #0
   826e2:	4c08      	ldr	r4, [pc, #32]	; (82704 <_read_r+0x28>)
   826e4:	4611      	mov	r1, r2
   826e6:	4607      	mov	r7, r0
   826e8:	461a      	mov	r2, r3
   826ea:	4630      	mov	r0, r6
   826ec:	6025      	str	r5, [r4, #0]
   826ee:	f7fd fe63 	bl	803b8 <_read>
   826f2:	1c43      	adds	r3, r0, #1
   826f4:	d000      	beq.n	826f8 <_read_r+0x1c>
   826f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   826f8:	6823      	ldr	r3, [r4, #0]
   826fa:	2b00      	cmp	r3, #0
   826fc:	d0fb      	beq.n	826f6 <_read_r+0x1a>
   826fe:	603b      	str	r3, [r7, #0]
   82700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82702:	bf00      	nop
   82704:	20070a6c 	.word	0x20070a6c
   82708:	6c6c6548 	.word	0x6c6c6548
   8270c:	6f57206f 	.word	0x6f57206f
   82710:	00646c72 	.word	0x00646c72

00082714 <_global_impure_ptr>:
   82714:	20070138 0000000a                       8.. ....

0008271c <_init>:
   8271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8271e:	bf00      	nop
   82720:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82722:	bc08      	pop	{r3}
   82724:	469e      	mov	lr, r3
   82726:	4770      	bx	lr

00082728 <__init_array_start>:
   82728:	00080f65 	.word	0x00080f65

0008272c <__frame_dummy_init_array_entry>:
   8272c:	00080119                                ....

00082730 <_fini>:
   82730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82732:	bf00      	nop
   82734:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82736:	bc08      	pop	{r3}
   82738:	469e      	mov	lr, r3
   8273a:	4770      	bx	lr

0008273c <__fini_array_start>:
   8273c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <_impure_ptr>:
20070130:	20070138 00000000                       8.. ....

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <__atexit_recursive_mutex>:
20070560:	20070a48                                H.. 

20070564 <__malloc_av_>:
	...
2007056c:	20070564 20070564 2007056c 2007056c     d.. d.. l.. l.. 
2007057c:	20070574 20070574 2007057c 2007057c     t.. t.. |.. |.. 
2007058c:	20070584 20070584 2007058c 2007058c     ... ... ... ... 
2007059c:	20070594 20070594 2007059c 2007059c     ... ... ... ... 
200705ac:	200705a4 200705a4 200705ac 200705ac     ... ... ... ... 
200705bc:	200705b4 200705b4 200705bc 200705bc     ... ... ... ... 
200705cc:	200705c4 200705c4 200705cc 200705cc     ... ... ... ... 
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 

2007096c <__malloc_sbrk_base>:
2007096c:	ffffffff                                ....

20070970 <__malloc_trim_threshold>:
20070970:	00020000                                ....
